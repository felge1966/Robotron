Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   1
USB     Z80

    1                   ;-----------------------------------------------------
    2                   ;
    3                   ;	UTools Version 1.5 (von M. Leubner)
    4                   ;
    5                   ; Hilfsprogramme zur Arbeit mit USB-Sticks unter CP/M
    6                   ;
    7                   ;	USB-Direktkommando ausfuehren
    8                   ;
    9                   ; USB.Z80 -> USB.COM	08.01.2008 - 01.12.2014
   10                   ;-----------------------------------------------------
   11                   ; Uebersetzung:		SLRZ80 USB/R
   12                   ;			SLRNK USB/N,/V,/A:100,USB,/E
   13                   ;			ERA USB.REL
   14                   ;-----------------------------------------------------
   15                   
   16                   	.Z80
   17                   	CSEG
   18                   
   19 0000' C3 0000#    	JP	START		; eigentlicher Programstart
   20 0003' 5A 33 45 4E 	DB	'Z3ENV'		; ENV von Z-System
   21 0008' 01          	DB	1		; Typ-1
   22 0009' 0000        ENVPTR:	DW	0		; Zeiger zu ENV-Beschreibung
   23 000B' 0100        	DW	100h		; ORG-Adresse
   24                   
   25                   ; Konfigurationsdatenbereich:
   26                   
   27 000D' 55 53 42 31 	DB	'USB14   '	; Name der CFG-Datei
   28 0015' 15          VERS:	DB	15H		; Version 1.5
   29 0016' 01          OPTION:	DB	00000001b	; Optionen:
   30                   ;	Bit 0	       ^--------- Anzeige der noch vorhandenen Daten bei Start
   31                   ;	Bit 1	      ^---------- Verzeichnis sortieren?
   32                   ;	Bit 3+2	    ^^----------- 00 nachfragen
   33                   ;	Bit 3+2	    ^^----------- 01 ueberschreiben
   34                   ;	Bit 3+2	    ^^----------- 10 ignorieren
   35                   ;	Bit 3+2	    ^^----------- 11 update nach Dateidatum
   36                   ;	Bit 4	   ^------------- Textdatei?
   37                   ;	Bit 5	  ^-------------- Ausfuehrliche Verzeichnisanzeige
   38                   ;	Bit 6	 ^--------------- noch frei (evtl. Druckprotokoll?)
   39                   ;	Bit 7	^---------------- Fortschrittsanzeige (0=% 1=#)
   40 0017' ??          TAKT:	DB	FREQ		; CPU-Taktfrequenz in MHz
   41                   
   42 0018' 20 20 20 20 excl:	DS	10*11,' '	; 10 auszuschliessende Dateien
   43                   
   44                   ;-----------------------------------------------------
   45                   
   46                   	include	USBINC.Z80	; allgemeine Unterprogramme
    1                  A;-----------------------------------------------------
    2                  A;
    3                  A;	UTools Version 1.5 (von M. Leubner)
    4                  A;
    5                  A; Hilfsprogramme zur Arbeit mit USB-Sticks unter CP/M
    6                  A;
    7                  A;	gemeinsam genutzte Unterprogramme
    8                  A;
    9                  A; USBINC.Z80 (Include)	    18.01.2008 - 03.12.2014
   10                  A;-----------------------------------------------------
   11                  A
   12         0000     AKC85	EQU	0	; 0 wenn PIO im CP/M direkt ansprechbar ist.
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   2
USBINC  Z80

   13                  A			; 1 wenn PIO nur ueber Treiber erreicht wird (KC85)
   14                  A
   15         0000     AIF KC85	; KC-spezifische Einstellungen:
   27                  AELSE 	; Einstellungen fuer nicht-KC-Systeme (Angaben entsprechen Z1013):
   28                  A
   29         0000     ABRKT	EQU	0	; Tastaturabfrage bei GET (Abbruch mit Break/ESC) ?
   30                  A			; 0 = keine Tastaturabfrage
   31                  A			; 1 = kann bei aufwaendigen BIOS-Routinen Uebertragung
   32                  A			; sehr stark bremsen!
   33                  A
   34                  A; Portadressen definieren:
   35         00DC     APIOA	EQU	0DCh	; Daten A (Datenport, bidirektional)
   36         00DD     APIOB	EQU	0DDh	; Daten B (Steuersignale, Bitbetrieb)
   37         00DE     APIOAS	EQU	0DEh	; Steuer A
   38         00DF     APIOBS	EQU	0DFh	; Steuer B
   39         0040     ABS	EQU	64	; Bildschirmbreite in Zeichen (64 oder 80 moeglich!)
   40         0002     AFREQ	EQU	2	; CPU-Taktfrequenz in MHz
   41                  A
   42                  AENDIF ;KC85
   43                  A
   44                  A; CP/M-Vereinbarungen:
   45                  A
   46         000A     ALF	EQU	0AH
   47         000D     ACR	EQU	0DH
   48         001A     AEOF	EQU	1AH
   49         001B     AESC	EQU	1BH
   50         0005     ABDOS	EQU	5
   51         000C     A_GETVER	EQU	12	; CP/M-Version testen
   52         000E     A_SELDSK	EQU	14	; Laufwerk waehlen
   53         0011     A_FIRST	EQU	17	; ersten Verzeichniseintrag suchen
   54         0012     A_NEXT	EQU	18	; naechsten Verzeichniseintrag suchen
   55         0020     A_SETUSR	EQU	32	; USER waehlen
   56         0023     A_CALC	EQU	35	; Dateigroesse berechnen
   57         0030     A_DOSVER	EQU	48	; erweiterte DOS-Version holen
   58         0062     A_GETCLK	EQU	98	; Uhrzeit holen
   59         0066     A_GETDAT	EQU	102	; Datumstempel lesen
   60         0067     A_SETDAT	EQU	103	; Datumstempel schreiben
   61         005C     AFCB1	EQU	5CH	; erster FCB
   62         006C     AFCB2	EQU	6CH	; zweiter FCB
   63         0080     ADEFDMA	EQU	80H	; Standard-DMA-Puffer
   64                  A
   65                  A; Vinculum-Kommandos:
   66                  A
   67         0001     ADIR	EQU	01H	; List file(s)
   68         0007     ADLF	EQU	07H	; Delete File
   69         0008     AWRF	EQU	08H	; Write to File
   70         0009     AOPW	EQU	09H	; Open/write
   71         000A     ACLF	EQU	0AH	; Close
   72         000B     ARDF	EQU	0BH	; Read from File
   73         000E     AOPR	EQU	0EH	; Open/read
   74         0010     ASCS	EQU	10H	; Short CMD
   75         0011     AECS	EQU	11H	; Extend. CMD
   76         002F     ADIRT	EQU	2FH	; List File Date&Time
   77         0091     AIPH	EQU	91H	; Binaer-Modus einstellen
   78                  A
   79                  A; Verwendung fertiger Routinen:
   80                  A
   81                  AEXT	$MEMRY		; Endadresse von Linker
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   3
USBINC  Z80

   82                  A
   83                  A	.request	DSLIBS
   84                  AEXT	M2UTIM		; DOS-Datum zu ZSDOS konvertieren
   85                  AEXT	U2MTIM		; ZSDOS-Datum zu DOS konvertieren
   86                  A
   87                  A	.request	SYSLIBS
   88                  AEXT	INITFCB		; FCB initialisieren
   89                  AEXT	SETDMA		; DMA-Adresse einstellen
   90                  AEXT	F$OPEN		; Datei oeffnen
   91                  AEXT	F$DELETE	; Datei loeschen
   92                  AEXT	F$MAKE		; Datei erzeugen
   93                  AEXT	F$WRITE		; Sektor in Datei schreiben
   94                  AEXT	F$READ		; Sektor aus Datei lesen
   95                  AEXT	F$CLOSE		; Datei schliessen
   96                  AEXT	PFN2		; Dateiname anzeigen
   97                  AEXT	COUT		; Zeichenausgabe zu CON:
   98                  AEXT	POUT		; Zeichenausgabe zu PUN:
   99                  AEXT	RIN		; Zeicheneingabe von RDR:
  100                  AEXT	EPRINT		; Zeichenkette anzeigen
  101                  AEXT	CAPIN		; Tastaturabfrage mit UPCASE
  102                  AEXT	CONDIN		; Tastaturabfrage
  103                  AEXT	PUTUD		; aktuelles DU: sichern
  104                  AEXT	GETUD		; gemerktes DU: regenerieren
  105                  AEXT	PA2HC		; A als 2stellige HEX/BCD-Zahl anzeigen
  106                  AEXT	PHLFDC		; HL als 1-5stellige Dezimalzahl anzeigen
  107                  AEXT	PHLDC		; HL als Dezimalzahl mit Leerzeichen anzeigen
  108                  A
  109                  A; ---------------------------------------------------------
  110                  A
  111                  A; Optionen aus 2. Parameter ermitteln und abspeichern:
  112                  A
  113                  Asetopt	macro
  114                  A; Verwendung der Optionsbits in allen Programmen gleich, aber nicht alle genutzt:
  115                  A;
  116                  A;	DB	00000010b	; Optionen (Voreinstellung):
  117                  A; V	Bit 0	       ^--------- Anzeige der noch vorhandenen Daten bei Start
  118                  A; S	Bit 1	      ^---------- Verzeichnis sortieren?
  119                  A; O	Bit 2	     ^----------- vorhandene Datei ueberschreiben?
  120                  A; I	Bit 3	    ^------------ vorhandene Datei ignorieren?
  121                  A; U	Bit 3+2     ^^----------- vorhandene Datei aktualisieren?
  122                  A; T/B	Bit 4	   ^------------- Textdatei?
  123                  A; W	Bit 5	  ^-------------- Ausfuehrliche Verzeichnisanzeige
  124                  A; P	Bit 6	 ^--------------- noch frei (evtl. Druckprotokoll?)
  125                  A; M	Bit 7	^---------------- Fortschrittsanzeige (0=% 1=#)
  126                  A
  127                  A	ld	hl,option	; Options-Flags
  128                  A	ld	de,fcb2+1	; Optionen in FCB2 testen
  129                  A	ld	b,11
  130                  A	ld	a,(de)
  131                  A	cp	'/'		; Einleitung fuer Optionen?
  132                  A	jr	z,opt7
  133                  Agetopt:	ld	a,(de)		; Optionen testen
  134                  A	cp	'/'
  135                  A	jp	z,help		; // ist Hilfe
  136                  A	cp	'O'		; ungefragt ueberschreiben?
  137                  A	jr	nz,opt1
  138                  A	set	2,(hl)
  139                  A	res	3,(hl)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   4
USBINC  Z80

  140                  Aopt1:	cp	'T'		; Textdatei?
  141                  A	jr	nz,opt2
  142                  A	set	4,(hl)
  143                  Aopt2:	cp	'B'		; Binaerdatei?
  144                  A	jr	nz,opt3
  145                  A	res	4,(hl)
  146                  Aopt3:	cp	'V'		; alte Daten anzeigen?
  147                  A	jr	nz,opt4
  148                  A	set	0,(hl)
  149                  Aopt4:	cp	'S'		; Liste sortieren?
  150                  A	jr	nz,opt5
  151                  A	set	1,(hl)
  152                  Aopt5:	cp	'I'		; vorhandene Datei ignorieren?
  153                  A	jr	nz,opt6
  154                  A	res	2,(hl)
  155                  A	set	3,(hl)
  156                  Aopt6:	cp	'W'		; ausfuehrliche Anzeige?
  157                  A	jr	nz,opt7
  158                  A	set	5,(hl)
  159                  Aopt7:	cp	'M'		; Fortschrittsanzeige wie MTOOLs?
  160                  A	jr	nz,opt8
  161                  A	set	7,(hl)
  162                  Aopt8:	cp	'U'		; vorhandene Dateien aktualisieren?
  163                  A	jr	nz,opt9
  164                  A	set	2,(hl)
  165                  A	set	3,(hl)
  166                  Aopt9:	inc	de
  167                  A	djnz	getopt
  168                  A	endm
  169                  A
  170                  A; Synchronisieren mit Vinculum:
  171                  A;
  172                  A; PA:	CY=1	Break, TimeOut oder Error
  173                  A; VR:	AF,HL,BC
  174                  A
  175 0086'            Asynchr:
  176         0000     AIF KC85				; CPU-Taktfrequenz von D008 ermitteln!
  211                  AELSE ;KC85
  212                  A
  213                  A; PIO Port B initialisieren:
  214 0086' 3E CF      A	ld	a,0CFH		; Bitbetrieb
  215 0088' D3 DF      A	out	(piobs),a
  216 008A' 3E 33      A	ld	a,00110011b	; I/O festlegen
  217 008C' D3 DF      A	out	(piobs),a
  218 008E' 3E 07      A	ld	a,07H		; DI, Maske folgt nicht
  219 0090' D3 DF      A	out	(piobs),a
  220                  A;	ld	a,0FFH		; kein Bit aktiv
  221                  A;	out	(piobs),a
  222 0092' 3E C4      A	ld	a,0C4H		; #PROG=1, #RESET=1, RD&WR inaktiv
  223 0094' D3 DD      A	out	(piob),a
  224                  A
  225                  A; PIO Port A initialisieren:
  226 0096' 3E 8F      A	ld	a,8FH		; bidirektional
  227 0098' D3 DE      A	out	(pioas),a
  228 009A' 3E 07      A	ld	a,07H		; kein INT
  229 009C' D3 DE      A	out	(pioas),a
  230 009E' DB DC      A	in	a,(pioa)	; Dummy-Eingabe
  231                  A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   5
USBINC  Z80

  232                  AENDIF ;KC85
  233                  A
  234                  A; dreistufiges Synchronisieren:
  235                  A
  236 00A0' 3A 0017'   Async:	LD	A,(TAKT)	; CPU-Taktfrequenz in MHz
  237 00A3' 47         A	LD	B,A
  238 00A4' 21 0000    A	LD	hl,0		; Startwert fuer Multiplikation
  239         0000     AIF KC85
  241                  AELSE
  242 00A7' 11 0258    A	ld	de,600		; Faktor fuer Zeitschleife bei CP/M-Version
  243                  AENDIF
  244 00AA' 19         AT3:	add	hl,de		; aufsummieren
  245 00AB' 10 FD      A	djnz	T3
  246 00AD' 54         A	ld	d,h
  247 00AE' 5D         A	ld	e,l		; DE = Zaehlerwert fuer Zeitschleife
  248 00AF' CD 0000#   Asyn0:	call	condin		; Tastatureingabe vorhanden?
  249 00B2' 28 ??      A	jr	z,syn1		; nein
  250 00B4' FE 03      A	cp	3		; Break?
  251 00B6' CA 0000    A	jp	z,0
  252 00B9' FE 1B      A	cp	esc		; ESC?
  253 00BB' CA 0000    A	jp	z,0
  254 00BE'            Asyn1:
  255         0000     AIF KC85
  258                  AELSE
  259 00BE' DB DD      A	in	a,(PIOB)	; Status abfragen
  260                  AENDIF
  261 00C0' 0F         A	rrca
  262 00C1' 38 ??      A	jr	c,syn2		; keine Daten vorhanden
  263 00C3' CD 0000#   A	call	get		; vorhandene Daten abholen
  264 00C6' 21 0016'   A	ld	hl,option
  265 00C9' CB 46      A	bit	0,(hl)
  266 00CB' C4 0000#   A	call	nz,crtx		; und anzeigen, wenn konfiguriert
  267 00CE' 18 D0      A	jr	sync
  268                  A	;
  269 00D0' 0F         Asyn2:	rrca	
  270 00D1' 38 CD      A	jr	c,sync		; noch nicht bereit, Daten zu schreiben
  271 00D3' 10 FE      A	djnz	$		; kurze Zeit warten
  272 00D5' 1B         A	dec	de
  273 00D6' 7A         A	ld	a,d		; Zaehler abwarten
  274 00D7' B3         A	or	e
  275 00D8' 20 D5      A	jr	nz,syn0		; nochmals nachschauen...
  276         0000     AIF KC85
  279                  AELSE
  280 00DA' DB DD      A	in	a,(PIOB)	; Status abfragen
  281                  AENDIF
  282 00DC' E6 03      A	and	3		; nur Bit 0 und 1 auswerten
  283 00DE' FE 01      A	cp	1		; alle Daten abgeholt und bereit zum schreiben?
  284 00E0' 20 BE      A	jr	nz,sync		; nein !
  285                  A
  286 00E2' 3E 0D      A	ld	a,cr
  287 00E4' CD 0000#   A	call	put		; <cr> muss irgendwie <cr> zurueckgeben
  288 00E7' CD 0000#   Asyn3:	call	get
  289 00EA' D8         A	ret	c		; BRK oder TimeOut
  290 00EB' FE 0D      A	cp	cr
  291 00ED' 20 F8      A	jr	nz,syn3
  292                  A
  293 00EF' 3E 45      A	ld	a,'E'		; E <cr> muss E <cr> zurueckgeben
  294 00F1' CD 0000#   A	call	put
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   6
USBINC  Z80

  295 00F4' 3E 0D      A	ld	a,cr
  296 00F6' CD 0000#   A	call	put
  297 00F9' CD 0000#   Asyn4:	call	get		; Daten holen
  298 00FC' D8         A	ret	c		; BRK oder TimeOut
  299 00FD' FE 45      A	cp	'E'
  300 00FF' 20 F8      A	jr	nz,syn4
  301 0101' CD 0000#   A	call	get
  302 0104' D8         A	ret	c		; BRK oder TimeOut
  303 0105' FE 0D      A	cp	cr
  304 0107' 20 F0      A	jr	nz,syn4
  305                  A
  306 0109' 3E 65      A	ld	a,'e'		; e <cr> muss e <cr> zurueckgeben
  307 010B' CD 0000#   A	call	put
  308 010E' 3E 0D      A	ld	a,cr
  309 0110' CD 0000#   A	call	put
  310 0113' CD 0000#   Asyn5:	call	get		; Daten abholen
  311 0116' D8         A	ret	c		; BRK oder TimeOut
  312 0117' FE 65      A	cp	'e'
  313 0119' 20 F8      A	jr	nz,syn5
  314 011B' CD 0000#   A	call	get
  315 011E' D8         A	ret	c		; BRK oder TimeOut
  316 011F' FE 0D      A	cp	cr
  317 0121' 20 F0      A	jr	nz,syn5
  318 0123' C9         A	ret
  319                  A
  320         0000     AIF KC85
  378                  AELSE ;KC85
  379                  A
  380                  A; Eingabe von VDIP1 abholen (mit Break und TimeOut):
  381                  A; PA:	A	Datenbyte
  382                  A;	CY=1	TimeOut oder Break
  383                  A; VR:	AF
  384                  A
  385 0124' C5         AGET:	push	bc
  386 0125' 01 0000    A	ld	bc,0		; Zeitkonstante
  387 0128'            Aget4:
  388         0000     AIF BRKT
  396                  AENDIF
  397 0128' DB DD      A	in	a,(PIOB)	; Status abfragen
  398 012A' 0F         A	rrca			; Daten vorhanden?
  399 012B' 30 ??      A	jr	nc,get3		; ja, abholen
  400 012D' 03         A	inc	bc
  401 012E' 78         A	ld	a,b
  402 012F' B1         A	or	c		; TimeOut?
  403 0130' 20 F6      A	jr	nz,get4
  404 0132' CD 0000#   Aget2:	call	eprint
  405 0135' 54 69 6D 65A	db	'TimeOut Error',0
  406         0000     AIF BRKT
  412                  AENDIF
  413 0143' C1         A	pop	bc
  414 0144' 37         A	scf			; Fehler
  415 0145' C9         A	ret
  416                  A	;
  417 0146' 3E C0      Aget3:	LD	A,0C0H		; RD# aktiv
  418 0148' D3 DD      A	OUT	(PIOB),A
  419 014A' DB DC      A	IN	A,(PIOA)	; Daten holen
  420 014C' 4F         A	LD	C,A
  421 014D' 3E C4      A	LD	A,0C4H		; RD# inaktiv
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   7
USBINC  Z80

  422 014F' D3 DD      A	OUT	(PIOB),A
  423 0151' 79         A	LD	A,C
  424 0152' C1         A	pop	bc
  425 0153' B7         A	or	a		; CY=0 (OK)
  426 0154' C9         A	ret
  427                  A
  428                  A; Ausgabe zu VDIP1 senden:
  429                  A; PE:	A	Datenbyte
  430                  A; VR:	-
  431                  A
  432 0155' D3 DC      APUT:	OUT	(PIOA),A	; Daten
  433 0157' F5         A	push	af
  434 0158' DB DD      Aput1:	IN	A,(PIOB)	; Status abfragen
  435 015A' 0F         A	RRCA
  436 015B' 0F         A	RRCA
  437 015C' 38 FA      A	JR	C,put1		; nicht bereit, warten!
  438 015E' 3E CC      A	LD	A,0CCH
  439 0160' D3 DD      A	OUT	(PIOB),A	; WR aktiv
  440 0162' 3E C4      A	LD	A,0C4H
  441 0164' D3 DD      A	OUT	(PIOB),A	; WR inaktiv
  442 0166' F1         A	pop	af
  443 0167' C9         A	RET
  444                  AENDIF ;KC85
  445                  A
  446                  A; Kommando, gefolgt von Dateiname (fcb1) ausloesen:
  447                  A;
  448                  A; PE:	A	Kommando
  449                  A; PA:	CY=1	Fehler
  450                  A
  451 0168' CD 0155'   AOUTNAM:	CALL	PUT		; Kommando
  452 016B' 3E 20      A	LD	A,' '
  453 016D' CD 0155'   A	CALL	PUT
  454 0170' 21 005D    A	LD	HL,fcb1+1	; Dateiname
  455 0173' 06 0B      A	LD	B,11		; Laenge 8+3
  456 0175' 7E         AOPEN:	LD	A,(HL)
  457 0176' E5         A	push	hl
  458 0177' E6 7F      A	and	7fh		; Bit 7 ruecksetzen
  459 0179' 21 0000#   A	ld	hl,errchr
  460 017C' 0E 05      A	ld	c,5		; 5 verbotene Zeichen testen
  461 017E' BE         Aop1:	cp	(hl)
  462 017F' 20 ??      A	jr	nz,op2
  463 0181' 3E 5F      A	ld	a,'_'		; -> konvertieren
  464 0183' 23         Aop2:	inc	hl
  465 0184' 0D         A	dec	c
  466 0185' 20 F7      A	jr	nz,op1
  467 0187' E1         A	pop	hl
  468 0188' 23         A	INC	HL
  469 0189' FE 21      A	CP	21H		; Leerzeichen oder Steuerzeichen?
  470 018B' D4 0155'   A	CALL	nc,PUT		; Dateiname
  471 018E' 78         A	ld	a,b
  472 018F' FE 04      A	cp	4
  473 0191' 3E 2E      A	ld	a,'.'		; Trennzeichen vor Dateityp
  474 0193' CC 0155'   A	call	z,PUT
  475 0196' 10 DD      A	DJNZ	OPEN
  476 0198' C9         A	ret
  477                  A	;
  478 0199' 5C 2F 22 7CAERRCHR:	DB	'\/"|+'		; Zeichen die unter DOS verboten sind
  479                  A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   8
USBINC  Z80

  480                  A; Vinculum-Kommando ausfuehren:
  481                  A;
  482                  A;PA:	CY=1	Fehler (VDIP1-Fehler oder BRK oder TimeOut)
  483                  A;VR:	AF
  484                  A
  485 019E' 3E 0D      AEXEC:	LD	A,CR	; Kommandoabschluss
  486 01A0' CD 0155'   A	CALL	PUT
  487 01A3' CD 0124'   Aex1:	CALL	GET	; Ergebnis holen
  488 01A6' D8         A	RET	C	; BRK oder TimeOut!
  489 01A7' FE 3E      A	CP	'>'
  490 01A9' 20 ??      A	JR	NZ,ERR
  491 01AB' CD 0124'   A	CALL	GET
  492 01AE' D8         A	RET	C
  493 01AF' FE 0D      A	CP	CR	; OK, fertig?
  494 01B1' C8         A	RET	Z
  495 01B2' CD 0000#   AERR:	CALL	CRTX	; Errorcode anzeigen
  496 01B5' CD 0124'   A	CALL	GET
  497 01B8' 38 ??      A	JR	C,EX3
  498 01BA' FE 0D      A	CP	CR	; Ende?
  499 01BC' 20 F4      A	JR	NZ,ERR
  500 01BE' CD 0000#   Aex3:	CALL	eprint
  501 01C1' 2D 45 72 72A	db	'-Error',0
  502 01C8' 37         A	SCF		; Fehler!
  503 01C9' C9         A	RET
  504                  A
  505                  A; spezielle CRT-Routine:
  506                  A;
  507                  A; PE:	A	Zeichencode
  508                  A; VR:	-
  509                  A
  510 01CA' F5         ACRTX:	push	af
  511 01CB' E6 7F      A	and	7fh		; Bit 7 abschneiden
  512 01CD' FE 20      A	cp	20h
  513 01CF' 30 ??      A	jr	nc,crt1		; darstellbares Zeichen!
  514 01D1' FE 0D      A	cp	cr
  515 01D3' 20 ??      A	jr	nz,crt2		; nur CR zulaessig
  516 01D5' CD 0000#   A	call	cout
  517 01D8' 3E 0A      A	ld	a,lf		; mit LF ergaenzen
  518 01DA' CD 0000#   Acrt1:	call	cout
  519 01DD' F1         Acrt2:	pop	af
  520 01DE' C9         A	ret
  521                  A
  522                  A; Anzeige UTools-Programmversion:
  523                  A
  524 01DF'            Aversion:
  525 01DF' CD 0000#   A	call	eprint
  526 01E2' 20 55 54 6FA	db	' UTools v',0
  527 01EC' 3A 0015'   A	ld	a,(vers)	; Versionsnummer BCD
  528 01EF' CD 0000#   A	call	verbcd
  529 01F2' CD 0000#   A	call	eprint
  530         0000     AIF KC85
  532                  AELSE ;KC85
  533 01F5' 20 43 50 2FA	DB	' CP/M '
  534                  AENDIF ;KC85
  535 01FB' 20 20 28 63A	db	'  (c) 2008-2014, M. Leubner',cr,lf,0
  536 0219' C9         A	ret
  537                  A;
  538                  A; Versionsnummer x.y anzeigen
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   9
USBINC  Z80

  539                  A; PE:	A	BCD-Wert
  540                  A; VR:	-
  541                  A;
  542 021A' F5         AVERBCD:	push	af
  543 021B' 1F         A	rra
  544 021C' 1F         A	rra
  545 021D' 1F         A	rra
  546 021E' 1F         A	rra
  547 021F' CD 0000#   A	call	ahex0		; hoeherwertigen Teil
  548 0222' 3E 2E      A	ld	a,'.'		; Trennzeichen
  549 0224' CD 0000#   A	call	cout
  550 0227' F1         A	pop	af		; niederwertigen Teil
  551 0228' F5         AAHEX0:	PUSH	AF
  552 0229' E6 0F      A	AND	0FH
  553 022B' C6 90      A	ADD	A,90H
  554 022D' 27         A	DAA
  555 022E' CE 40      A	ADC	A,40H
  556 0230' 27         A	DAA
  557 0231' CD 0000#   A	CALL	cout
  558 0234' F1         A	POP	AF
  559 0235' C9         A	RET
  560                  A
  561                  A;
  562                  A; Treiberumleitung deaktivieren (vor EXIT):
  563                  A; V1.4: vorher noch alle anliegenden Daten abholen
  564                  A;
  565         0000     AIF KC85
  599                  AELSE	; noch vorhandene Daten abholen wenn kein KC85:
  600 0236' DB DD      Adeinit:	in	a,(PIOB)	; Status abfragen
  601 0238' 0F         A	rrca
  602 0239' 38 ??      A	jr	c,deini2	; keine Daten vorhanden
  603 023B' CD 0124'   A	call	get		; vorhandene Daten abholen
  604 023E' 18 F6      A	jr	deinit
  605 0240' 10 FE      Adeini2:	djnz	$		; kurze Zeit warten
  606 0242' DB DD      A	in	a,(PIOB)	; Status-Kontrolle
  607 0244' E6 03      A	and	3		; nur Bit 0 und 1 auswerten
  608 0246' FE 01      A	cp	1		; alle Daten abgeholt und bereit zum schreiben?
  609 0248' 20 EC      A	jr	nz,deinit	; nein !
  610                  Aendif ;KC85
  611 024A' C9         A	ret
  612                  A
  613                  APROZENT	macro
  614                  A; Fortschrittsanzeige in Prozent der Dateigroesse berechnen und anzeigen
  615                  A;
  616                  A; PE:	(filesize0)	Gesamtgroesse
  617                  A;	(filesize)	Laufvariable (Rueckwartszaehler)
  618                  A;
  619                  A; VR:	alle
  620                  A
  621                  APROZ:	ld	a,(option)	; Fortschritt wie anzeigen?
  622                  A	rlca
  623                  A	jr	nc,PROZ0	; Fortschrittsanzeige in Prozent
  624                  A	ld	a,'#'
  625                  A	jp	cout		; Zeichen anzeigen fuer einen Datenblock
  626                  A	;
  627                  APROZ0:	LD	IX,FILESIZE0	; Gesamtdateigroesse
  628                  A	ld	de,(filesize)
  629                  A	ld	bc,(filesize+2)	; BCDE = restliche Anzahl
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  10
USBINC  Z80

  630                  A	ld	a,(ix)
  631                  A	sub	e
  632                  A	ld	e,a
  633                  A	ld	a,(ix+1)
  634                  A	sbc	a,d
  635                  A	ld	d,a
  636                  A	ld	a,(ix+2)
  637                  A	sbc	a,c
  638                  A	ld	c,a
  639                  A	ld	a,(ix+3)
  640                  A	sbc	a,b
  641                  A	ld	b,a		; BCDE = abgearbeitete Groesse
  642                  A	ld	a,cr
  643                  A	call	cout		; Cursor an Zeilenanfang setzen
  644                  A	LD	A,(IX)
  645                  A	OR	(IX+1)
  646                  A	OR	(IX+2)
  647                  A	OR	(IX+3)
  648                  A	JR	Z,PROZ1		; Dateigroesse = 0 -> 100,0%
  649                  A	xor	a
  650                  A	ex	af,af'		; fuehrende Nullen ausblenden
  651                  A	call	ZIFFER		; Hunderter anzeigen
  652                  A	call	mul10		; BCDE * 10
  653                  A	call	ZIFFER		; Zehner anzeigen
  654                  A	call	mul10		; BCDE * 100
  655                  A	ld	a,'0'
  656                  A	ex	af,af'
  657                  A	call	ZIFFER		; Einer anzeigen
  658                  A	ld	a,','
  659                  A	call	cout		; Trennzeichen
  660                  A	call	mul10		; BCDE * 1000
  661                  A	call	ZIFFER		; Zehntel anzeigen
  662                  A	ld	a,'%'
  663                  A	jp	cout
  664                  APROZ1:	call	eprint
  665                  A	db	'100,0%',0
  666                  A	ret
  667                  A
  668                  A; 32-Bit-Zahl in BCDE mit 10 multiplizieren
  669                  A;
  670                  A; PE:	BCDE	32-Bit-Zahl
  671                  A; PA:	BCDE	Ergebnis
  672                  A;
  673                  Amul10:	SLA	E
  674                  A	RL	D
  675                  A	RL	C
  676                  A	RL	B	; *2
  677                  A	push	bc
  678                  A	push	de
  679                  A	SLA	E
  680                  A	RL	D
  681                  A	RL	C
  682                  A	RL	B	; *4
  683                  A	SLA	E
  684                  A	RL	D
  685                  A	RL	C
  686                  A	RL	B	; *8
  687                  A	POP	HL
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  11
USBINC  Z80

  688                  A	ADD	HL,DE
  689                  A	EX	DE,HL
  690                  A	POP	HL
  691                  A	ADC	HL,BC
  692                  A	LD	B,H
  693                  A	LD	C,L	; BCDE*10 (8+2)
  694                  A	ret
  695                  A
  696                  A; Verhaeltnis zweier 32-Bit-Zahlen BCD berechnen und anzeigen
  697                  A; (eine Stelle fuer Prozentanzeige)
  698                  A;
  699                  A; PE:	BCDE	32-Bit-Ziffer
  700                  A;	IX	Wertigkeit (Gesamtdateigroesse)
  701                  A;	A'	'0' wenn Ausgabe laeuft
  702                  A; PA:	BCDE	Rest, der bei der Teilung uebrig bleibt
  703                  A
  704                  AZIFFER:	LD	L,99H		; Zaehler
  705                  AZIFF1:	LD	A,L
  706                  A	ADD	A,1		; HL = HL+1 (BCD)
  707                  A	DAA
  708                  A	LD	L,A
  709                  A
  710                  A	LD	A,E
  711                  A	SUB	(IX)		; E = niederwertigstes Byte
  712                  A	LD	E,A
  713                  A	LD	A,D
  714                  A	SBC	A,(IX+1)	; D = mittleres Byte
  715                  A	LD	D,A
  716                  A	LD	A,C
  717                  A	SBC	A,(IX+2)	; C = hoeherwertiges Byte
  718                  A	LD	C,A
  719                  A	LD	A,B
  720                  A	SBC	A,(IX+3)	; B = hoechstwertiges Byte
  721                  A	LD	B,A
  722                  A	JR	NC,ZIFF1	; nochmal enthalten
  723                  A
  724                  A	LD	A,E
  725                  A	ADD	A,(IX)		; letzten Teil wieder addieren
  726                  A	LD	E,A
  727                  A	LD	A,D
  728                  A	ADC	A,(IX+1)
  729                  A	LD	D,A
  730                  A	LD	A,C
  731                  A	ADC	A,(IX+2)
  732                  A	LD	C,A
  733                  A	LD	A,B
  734                  A	ADC	A,(IX+3)
  735                  A	LD	B,A
  736                  A
  737                  A	LD	A,L
  738                  A	AND	0FH		; Zahler = null?
  739                  A	JR	NZ,ZIFF2	; nein, sofort anzeigen
  740                  A	EX	AF,AF'
  741                  A	PUSH	AF
  742                  A	EX	AF,AF'
  743                  A	POP	AF
  744                  A	OR	A		; laeuft Ausgabe schon?
  745                  A	RET	Z		; nein, keine fuehrende Nullen!
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  12
USBINC  Z80

  746                  AZIFF2:	EX	AF,AF'
  747                  A	LD	A,'0'		; Ausgabe laeuft
  748                  A	EX	AF,AF'
  749                  A	OR	'0'		; Ziffer
  750                  A	JP	COUT		; anzeigen
  751                  A	endm
  752                  A
  753                  A;	end of include
   47                   
   48                   ;-----------------------------------------------------
   49                   
   50 024B' CD 01DF'    HELP:	call	version		; Programmversion
   51 024E' CD 0000#    	call	eprint
   52 0251' 0D 0A       	db	cr,lf
   53 0253' 20 55 53 42 	db	' USB.COM gibt Kommandos direkt zum Vinculum aus.',cr,lf
   54 0285' 0D 0A       	db	cr,lf
   55 0287' 20 42 65 69 	db	' Beispiele:',cr,lf
   56 0294' 20 20 20 55 	db	'   USB                 - Pruefen ob Laufwerk vorhanden ist',cr,lf
   57 02D0' 20 20 20 55 	db	'   USB FWV             - Anzeige der Vinculum-Firmware-Version',cr,lf
   58 0310' 20 20 20 55 	db	'   USB IDD             - Anzeige der Laufwerksinformationen',cr,lf
   59 034D' 20 20 20 55 	db	'   USB DIR             - Anzeige des unsortierten Verzeichnisses',cr,lf
   60 038F' 20 20 20 55 	db	'   USB CD /            - Geht zum Hauptverzeichnis',cr,lf
   61 03C3' 20 20 20 55 	db	'   USB CD <dirname>    - Wechsel in Unterverzeichnis',cr,lf
   62 03F9' 20 20 20 55 	db	'   USB CD ..           - Verzeichnisebene zurueck',cr,lf
   63 042C' 20 20 20 55 	db	'   USB MKD <dirname>   - Unterverzeichnis anlegen',cr,lf
   64 045F' 20 20 20 55 	db	'   USB DLD <dirname>   - leeres Unterverzeichnis loeschen',cr,lf
   65 049A' 20 20 20 55 	db	'   USB DLF <filename>  - Datei loeschen',cr,lf
   66 04C3' 20 20 20 55 	db	'   USB RD <filename>   - (Text-)Datei anzeigen',cr,lf
   67 04F3' 20 20 20 55 	db	'   USB REN <alt> <neu> - Datei umbenennen',cr,lf
   68 051E' 20 20 20 55 	db	'   USB //              - Anzeige der Hilfeseite',cr,lf
   69 054F' 00          	db	0
   70 0550' C7          	rst	0
   71                   ;
   72 0551' 21 0080     START:	ld	hl,defdma	; Kommandozeile analysieren
   73 0554' 7E          	ld	a,(hl)
   74 0555' 47          	ld	b,a		; Anzahl
   75 0556' B7          	or	a
   76 0557' 28 ??       	jr	z,trail3	; keine Parameter angegeben
   77 0559' 23          trail1:	inc	hl
   78 055A' 7E          	ld	a,(hl)		; 1. Zeichen testen
   79 055B' FE 20       	cp	' '
   80 055D' 28 ??       	jr	z,trail2
   81 055F' FE 2F       	cp	'/'
   82 0561' CA 024B'    	jp	z,help		; // ist CP/M Hilfeanforderung!
   83 0564' 18 ??       	jr	trail3
   84 0566' 10 F1       trail2:	djnz	trail1		; Leerzeichen am Anfang uebergehen
   85 0568' E5          trail3:	push	hl
   86 0569' C5          	push	bc
   87 056A' CD 0086'    	call	synchr		; Synchronisation
   88 056D' C1          	pop	bc
   89 056E' E1          	pop	hl
   90 056F' DA 0000#    	jp	c,exit
   91                   
   92                   ; Extended CMD-Modus aktivieren:
   93                   
   94 0572' 3E 11       	LD	A,ECS		; Extended CMD-Modus
   95 0574' CD 0155'    	CALL	put
   96 0577' 3E 0D       	LD	A,CR		; Kommandoabschluss
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  13
USB     Z80

   97 0579' CD 0155'    	CALL	put
   98 057C' CD 0124'    ecs1:	CALL	GET		; Ergebnis holen
   99 057F' 38 ??       	jr	c,exit		; BRK oder TimeOut!
  100 0581' FE 3E       	CP	'>'
  101 0583' 20 F7       	JR	NZ,ecs1		; warten bis Prompt kommt
  102 0585' CD 0124'    	CALL	GET
  103 0588' 38 ??       	jr	c,exit		; BRK oder TimeOut
  104 058A' FE 0D       	CP	CR
  105 058C' 20 ??       	jr	nz,exit		; kein CR nach Prompt!
  106                   
  107                   ; Ausgabe Kommando:
  108                   
  109 058E' E5          	push	hl		; Kommandobeginn merken
  110 058F' 04          	inc	b		; bei Laenge=0 nur cr!
  111 0590' 18 ??       	jr	ausg2
  112 0592' 7E          ausg1:	ld	a,(hl)		; Kommandozeilenrest
  113 0593' 23          	inc	hl
  114 0594' CD 0155'    	call	put		; zum VDIP1 senden
  115 0597' 10 F9       ausg2:	djnz	ausg1
  116 0599' 36 00       	ld	(hl),0		; Ende-0 anhaengen (zur Sicherheit)
  117 059B' E1          	pop	hl
  118 059C' 7E          	ld	a,(hl)
  119 059D' FE 4D       	cp	'M'		; Testen ob Kommando "MKD_?" ist
  120 059F' 20 ??       	jr	nz,ausg4
  121 05A1' 23          	inc	hl
  122 05A2' 7E          	ld	a,(hl)
  123 05A3' FE 4B       	cp	'K'
  124 05A5' 20 ??       	jr	nz,ausg4
  125 05A7' 23          	inc	hl
  126 05A8' 7E          	ld	a,(hl)
  127 05A9' FE 44       	cp	'D'
  128 05AB' 20 ??       	jr	nz,ausg4
  129 05AD' 23          	inc	hl
  130 05AE' 7E          	ld	a,(hl)
  131 05AF' FE 20       	cp	' '
  132 05B1' 20 ??       	jr	nz,ausg4
  133 05B3' 23          ausg3:	inc	hl
  134 05B4' 7E          	ld	a,(hl)
  135 05B5' FE 20       	cp	' '
  136 05B7' 28 ??       	jr	z,ausg4		; weiteres Leerzeichen darf nicht sein!
  137 05B9' B7          	or	a		; bis Kommandoende weitersuchen
  138 05BA' 20 F7       	jr	nz,ausg3
  139 05BC' CD 0000#    	call	mdatum		; Systemdatum dem Kommando anhaengen
  140 05BF' 3E 0D       ausg4:	ld	a,cr
  141 05C1' CD 0155'    	call	put		; Kommando abschliessen
  142                   
  143                   ; Rueckgabe abholen:
  144                   
  145 05C4' 21 0000#    eing0:	ld	hl,$memry	; Ablagepuffer
  146 05C7' CD 0124'    eing1:	call	get		; Daten holen
  147 05CA' 38 ??       	jr	c,exit		; BRK oder TimeOut
  148 05CC' FE 0D       	cp	cr		; Zeilenende?
  149 05CE' 28 ??       	jr	z,eing2		; ja, testen ob fertig
  150 05D0' 77          	ld	(hl),a		; im Speicher merken
  151 05D1' 23          	inc	hl
  152 05D2' CD 01CA'    	call	crtx		; und anzeigen
  153 05D5' 18 F0       	jr	eing1
  154                   	;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  14
USB     Z80

  155 05D7' CD 01CA'    eing2:	call	crtx		; cr anzeigen
  156 05DA' 11 0000#    	ld	de,errtab	; Fertigmeldungen testen
  157 05DD' 2B          	dec	hl		; zurueck zu letztem Zeichen
  158 05DE' E5          eing3:	push	hl
  159 05DF' 1A          eing4:	ld	a,(de)
  160 05E0' 1B          	dec	de
  161 05E1' B7          	or	a
  162 05E2' 28 ??       	jr	z,exit1		; Zeichenkette gefunden -> fertig!
  163 05E4' FE 0D       	cp	cr
  164 05E6' 28 ??       	jr	z,exit1		;		- " -
  165 05E8' BE          	cp	(hl)
  166 05E9' 2B          	dec	hl
  167 05EA' 28 F3       	jr	z,eing4		; Zeichen stimmt
  168 05EC' E1          	pop	hl
  169 05ED' 1A          eing5:	ld	a,(de)		; in den Vergleichsketten
  170 05EE' 1B          	dec	de
  171 05EF' B7          	or	a		; Trennzeichen zu naechster Meldung suchen
  172 05F0' 28 EC       	jr	z,eing3		; und testen
  173 05F2' FE 0D       	cp	cr		; erste Meldung erreicht?
  174 05F4' 28 CE       	jr	z,eing0		; keine hinterlegte Meldung, also weiter
  175 05F6' 18 F5       	jr	eing5
  176                   
  177 05F8' E1          exit1:	pop	hl
  178 05F9' CD 0236'    exit:	call	deinit		; Treiber deaktivieren
  179 05FC' C7          	rst	0
  180                   
  181                   ; CP/M Systemdatum+Zeit bei MKD anhaengen:
  182                   
  183 05FD' 0E 0C       mdatum:	ld	c,_getver
  184 05FF' CD 0005     	call	bdos		; CP/M Version holen
  185 0602' FE 22       	cp	22h
  186 0604' C0          	ret	nz		; nicht 2.2-kompatibel!
  187 0605' 0E 30       	ld	c,_dosver
  188 0607' CD 0005     	call	bdos		; erweiterte DOS-Version holen
  189 060A' 7C          	ld	a,h
  190 060B' FE 53       	cp	'S'		; ZSDOS?
  191 060D' 28 ??       	jr	z,mdat1
  192 060F' FE 44       	cp	'D'		; ZDDOS?
  193 0611' C0          	ret	nz
  194 0612' 11 0000#    mdat1:	ld	de,Datum
  195 0615' 0E 62       	ld	c,_GETCLK
  196 0617' CD 0005     	call	bdos		; aktuelle Uhrzeit holen
  197 061A' 3D          	dec	a
  198 061B' C0          	ret	nz		; Fehler beim Uhrzeit lesen!
  199 061C' 11 0000#    	ld	de,Datum
  200 061F' 21 0000#    	ld	hl,DOSDAT
  201 0622' CD 0000#    	call	u2mtim		; Datum fuer DOS konvertieren
  202 0625' C0          	ret	nz		; Fehler beim konvertieren!
  203 0626' 3E 20       	ld	a,' '		; Leerzeichen
  204 0628' CD 0155'    	call	put
  205 062B' 21 ????     	LD	HL,DOSDAT+3	; Datum im DOS-Format
  206 062E' 06 04       	LD	B,4		; 4 Byte = 32 Bit
  207 0630' 7E          mdat2:	LD	A,(HL)
  208 0631' 2B          	dec	HL
  209 0632' CD 0155'    	CALL	put
  210 0635' 10 F9       	DJNZ	mdat2
  211 0637' C9          	ret
  212                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  15
USB     Z80

  213                   ; Dateidatum anzeigen:
  214                   
  215 0638' CD 0000#    danz:	call	eprint
  216 063B' 44 61 74 75 	db	'Datum: ',0
  217 0643' 3A 0000#    	ld	a,(Tag)
  218 0646' CD 0000#    	call	pa2hc
  219 0649' 3E 2E       	ld	a,'.'
  220 064B' CD 0000#    	call	cout
  221 064E' 3A 0000#    	ld	a,(Monat)
  222 0651' CD 0000#    	call	pa2hc
  223 0654' 3E 2E       	ld	a,'.'
  224 0656' CD 0000#    	call	cout
  225 0659' 3A 0000#    	ld	a,(Jahr)
  226 065C' FE 78       	cp	78h
  227 065E' 3E 19       	ld	a,19h		; Jahrhundert 1978-1999
  228 0660' CE 00       	adc	a,0
  229 0662' 27          	daa			; oder 2000-2077
  230 0663' CD 0000#    	call	pa2hc
  231 0666' 3A 0000#    	ld	a,(Jahr)
  232 0669' CD 0000#    	call	pa2hc
  233 066C' 3E 20       	ld	a,' '
  234 066E' CD 0000#    	call	cout
  235 0671' 3A 0000#    	ld	a,(Stunde)
  236 0674' CD 0000#    	call	pa2hc
  237 0677' 3E 3A       	ld	a,':'
  238 0679' CD 0000#    	call	cout
  239 067C' 3A 0000#    	ld	a,(Minute)
  240 067F' CD 0000#    	call	pa2hc
  241 0682' C9          	ret
  242                   
  243                   	dseg
  244                   
  245                   ; Liste der moeglichen Fertigmeldungen:
  246                   
  247 0000" 0D          	db	cr
  248 0001" 42 61 64 20 	db	'Bad Command',0		; Fehlermeldungen
  249 000D" 43 6F 6D 6D 	db	'Command Failed',0
  250 001C" 44 69 73 6B 	db	'Disk Full',0
  251 0026" 49 6E 76 61 	db	'Invalid',0
  252 002E" 52 65 61 64 	db	'Read Only',0
  253 0038" 46 69 6C 65 	db	'File Open',0
  254 0042" 44 69 72 20 	db	'Dir Not Empty',0
  255 0050" 46 69 6C 65 	db	'Filename Invalid',0
  256 0061" 4E 6F 20 44 	db	'No Disk',0		; Prompt - ohne USB-Stick
  257 0069" 44 3A 5C 3E 	db	'D:\>'			; Prompt - wenn OK
  258         006C"     ERRTAB	equ	$-1
  259                   
  260 006D" 0000  0000  DOSDAT:		DW	0,0	; MS-DOS Datum
  261 0071" 00 00 00 00 Datum:		DS	6,0	; System-Datum im CP/M-Format (BCD)
  262         0071"     JAHR	equ	Datum
  263         0072"     MONAT	equ	Datum+1
  264         0073"     TAG	equ	Datum+2
  265         0074"     STUNDE	equ	Datum+3
  266         0075"     MINUTE	equ	Datum+4
  267                   
  268                   	end
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  16


 0 Error(s) Detected. 1667 Program Bytes. 119 Data Bytes.
 129 Symbols Detected.
 250 001C" 44 69 73 6B 	db	'Dis