Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   1
UGET    Z80

    1                   ;-----------------------------------------------------
    2                   ;
    3                   ;	UTools Version 1.5 (von M. Leubner)
    4                   ;
    5                   ; Hilfsprogramme zur Arbeit mit USB-Sticks unter CP/M
    6                   ;
    7                   ;	Dateien von USB-Stick lesen
    8                   ;
    9                   ; UGET.Z80 -> UGET.COM	12.01.2008 - 01.12.2014
   10                   ;-----------------------------------------------------
   11                   ; Uebersetzung:		SLRZ80 UGET/R
   12                   ;			SLRNK UGET/N,/V,/A:100,UGET,/E
   13                   ;			ERA UGET.REL
   14                   ;-----------------------------------------------------
   15                   
   16                   	.Z80
   17                   	CSEG
   18                   
   19 0000' C3 0000#    	JP	START		; eigentlicher Programstart
   20 0003' 5A 33 45 4E 	DB	'Z3ENV'		; ENV von Z-System
   21 0008' 01          	DB	1		; Typ-1
   22 0009' 0000        ENVPTR:	DW	0		; Zeiger zu ENV-Beschreibung
   23 000B' 0100        	DW	100h		; ORG-Adresse
   24                   
   25                   ; Konfigurationsdatenbereich:
   26                   
   27 000D' 55 53 42 31 	DB	'USB14   '	; Name der CFG-Datei
   28 0015' 15          VERS:	DB	15H		; Version 1.5
   29 0016' 02          OPTION:	DB	00000010b	; Optionen (Voreinstellung):
   30                   ;	Bit 0	       ^--------- Anzeige der noch vorhandenen Daten bei Start
   31                   ;	Bit 1	      ^---------- Verzeichnis sortieren?
   32                   ;	Bit 3+2	    ^^----------- 00 nachfragen
   33                   ;	Bit 3+2	    ^^----------- 01 ueberschreiben
   34                   ;	Bit 3+2	    ^^----------- 10 ignorieren
   35                   ;	Bit 3+2	    ^^----------- 11 update nach Dateidatum
   36                   ;	Bit 4	   ^------------- Textdatei?
   37                   ;	Bit 5	  ^-------------- Ausfuehrliche Verzeichnisanzeige
   38                   ;	Bit 6	 ^--------------- noch frei (evtl. Druckprotokoll?)
   39                   ;	Bit 7	^---------------- Fortschrittsanzeige (0=% 1=#)
   40 0017' ??          TAKT:	DB	FREQ		; CPU-Taktfrequenz in MHz
   41                   
   42 0018' 21 21 21 54 excl:	db	'!!!TIME&DAT'	; 10 auszuschliessende Dateien
   43 0023' 3F 3F 3F 3F 	db	'????????TMP'	; temporaere Dateien
   44 002E' 24 24 24 20 	db	'$$$     SUB'	; System-Submit
   45 0039' 3F 3F 3F 3F 	db	'????????$?$'	; temporaere Dateien
   46 0044' 3F 3F 3F 3F 	db	'????????BAK'	; Backup-Dateien
   47 004F' 5B 3F 3F 3F 	db	'[??????]???'	; Dateien mit def. Sektoren
   48 005A' 42 41 43 4B 	db	'BACKUP  LOG'	; Backup.Log nicht automatisch sichern!
   49 0065' 20 20 20 20 	db	'           '	;
   50 0070' 20 20 20 20 	db	'           '	;
   51 007B' 20 20 20 20 	db	'           '	;
   52                   
   53                   ;-----------------------------------------------------
   54                   
   55                   	include	USBINC.Z80	; allgemeine Unterprogramme
    1                  A;-----------------------------------------------------
    2                  A;
    3                  A;	UTools Version 1.5 (von M. Leubner)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   2
USBINC  Z80

    4                  A;
    5                  A; Hilfsprogramme zur Arbeit mit USB-Sticks unter CP/M
    6                  A;
    7                  A;	gemeinsam genutzte Unterprogramme
    8                  A;
    9                  A; USBINC.Z80 (Include)	    18.01.2008 - 03.12.2014
   10                  A;-----------------------------------------------------
   11                  A
   12         0000     AKC85	EQU	0	; 0 wenn PIO im CP/M direkt ansprechbar ist.
   13                  A			; 1 wenn PIO nur ueber Treiber erreicht wird (KC85)
   14                  A
   15         0000     AIF KC85	; KC-spezifische Einstellungen:
   27                  AELSE 	; Einstellungen fuer nicht-KC-Systeme (Angaben entsprechen Z1013):
   28                  A
   29         0000     ABRKT	EQU	0	; Tastaturabfrage bei GET (Abbruch mit Break/ESC) ?
   30                  A			; 0 = keine Tastaturabfrage
   31                  A			; 1 = kann bei aufwaendigen BIOS-Routinen Uebertragung
   32                  A			; sehr stark bremsen!
   33                  A
   34                  A; Portadressen definieren:
   35         00DC     APIOA	EQU	0DCh	; Daten A (Datenport, bidirektional)
   36         00DD     APIOB	EQU	0DDh	; Daten B (Steuersignale, Bitbetrieb)
   37         00DE     APIOAS	EQU	0DEh	; Steuer A
   38         00DF     APIOBS	EQU	0DFh	; Steuer B
   39         0040     ABS	EQU	64	; Bildschirmbreite in Zeichen (64 oder 80 moeglich!)
   40         0002     AFREQ	EQU	2	; CPU-Taktfrequenz in MHz
   41                  A
   42                  AENDIF ;KC85
   43                  A
   44                  A; CP/M-Vereinbarungen:
   45                  A
   46         000A     ALF	EQU	0AH
   47         000D     ACR	EQU	0DH
   48         001A     AEOF	EQU	1AH
   49         001B     AESC	EQU	1BH
   50         0005     ABDOS	EQU	5
   51         000C     A_GETVER	EQU	12	; CP/M-Version testen
   52         000E     A_SELDSK	EQU	14	; Laufwerk waehlen
   53         0011     A_FIRST	EQU	17	; ersten Verzeichniseintrag suchen
   54         0012     A_NEXT	EQU	18	; naechsten Verzeichniseintrag suchen
   55         0020     A_SETUSR	EQU	32	; USER waehlen
   56         0023     A_CALC	EQU	35	; Dateigroesse berechnen
   57         0030     A_DOSVER	EQU	48	; erweiterte DOS-Version holen
   58         0062     A_GETCLK	EQU	98	; Uhrzeit holen
   59         0066     A_GETDAT	EQU	102	; Datumstempel lesen
   60         0067     A_SETDAT	EQU	103	; Datumstempel schreiben
   61         005C     AFCB1	EQU	5CH	; erster FCB
   62         006C     AFCB2	EQU	6CH	; zweiter FCB
   63         0080     ADEFDMA	EQU	80H	; Standard-DMA-Puffer
   64                  A
   65                  A; Vinculum-Kommandos:
   66                  A
   67         0001     ADIR	EQU	01H	; List file(s)
   68         0007     ADLF	EQU	07H	; Delete File
   69         0008     AWRF	EQU	08H	; Write to File
   70         0009     AOPW	EQU	09H	; Open/write
   71         000A     ACLF	EQU	0AH	; Close
   72         000B     ARDF	EQU	0BH	; Read from File
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   3
USBINC  Z80

   73         000E     AOPR	EQU	0EH	; Open/read
   74         0010     ASCS	EQU	10H	; Short CMD
   75         0011     AECS	EQU	11H	; Extend. CMD
   76         002F     ADIRT	EQU	2FH	; List File Date&Time
   77         0091     AIPH	EQU	91H	; Binaer-Modus einstellen
   78                  A
   79                  A; Verwendung fertiger Routinen:
   80                  A
   81                  AEXT	$MEMRY		; Endadresse von Linker
   82                  A
   83                  A	.request	DSLIBS
   84                  AEXT	M2UTIM		; DOS-Datum zu ZSDOS konvertieren
   85                  AEXT	U2MTIM		; ZSDOS-Datum zu DOS konvertieren
   86                  A
   87                  A	.request	SYSLIBS
   88                  AEXT	INITFCB		; FCB initialisieren
   89                  AEXT	SETDMA		; DMA-Adresse einstellen
   90                  AEXT	F$OPEN		; Datei oeffnen
   91                  AEXT	F$DELETE	; Datei loeschen
   92                  AEXT	F$MAKE		; Datei erzeugen
   93                  AEXT	F$WRITE		; Sektor in Datei schreiben
   94                  AEXT	F$READ		; Sektor aus Datei lesen
   95                  AEXT	F$CLOSE		; Datei schliessen
   96                  AEXT	PFN2		; Dateiname anzeigen
   97                  AEXT	COUT		; Zeichenausgabe zu CON:
   98                  AEXT	POUT		; Zeichenausgabe zu PUN:
   99                  AEXT	RIN		; Zeicheneingabe von RDR:
  100                  AEXT	EPRINT		; Zeichenkette anzeigen
  101                  AEXT	CAPIN		; Tastaturabfrage mit UPCASE
  102                  AEXT	CONDIN		; Tastaturabfrage
  103                  AEXT	PUTUD		; aktuelles DU: sichern
  104                  AEXT	GETUD		; gemerktes DU: regenerieren
  105                  AEXT	PA2HC		; A als 2stellige HEX/BCD-Zahl anzeigen
  106                  AEXT	PHLFDC		; HL als 1-5stellige Dezimalzahl anzeigen
  107                  AEXT	PHLDC		; HL als Dezimalzahl mit Leerzeichen anzeigen
  108                  A
  109                  A; ---------------------------------------------------------
  110                  A
  111                  A; Optionen aus 2. Parameter ermitteln und abspeichern:
  112                  A
  113                  Asetopt	macro
  114                  A; Verwendung der Optionsbits in allen Programmen gleich, aber nicht alle genutzt:
  115                  A;
  116                  A;	DB	00000010b	; Optionen (Voreinstellung):
  117                  A; V	Bit 0	       ^--------- Anzeige der noch vorhandenen Daten bei Start
  118                  A; S	Bit 1	      ^---------- Verzeichnis sortieren?
  119                  A; O	Bit 2	     ^----------- vorhandene Datei ueberschreiben?
  120                  A; I	Bit 3	    ^------------ vorhandene Datei ignorieren?
  121                  A; U	Bit 3+2     ^^----------- vorhandene Datei aktualisieren?
  122                  A; T/B	Bit 4	   ^------------- Textdatei?
  123                  A; W	Bit 5	  ^-------------- Ausfuehrliche Verzeichnisanzeige
  124                  A; P	Bit 6	 ^--------------- noch frei (evtl. Druckprotokoll?)
  125                  A; M	Bit 7	^---------------- Fortschrittsanzeige (0=% 1=#)
  126                  A
  127                  A	ld	hl,option	; Options-Flags
  128                  A	ld	de,fcb2+1	; Optionen in FCB2 testen
  129                  A	ld	b,11
  130                  A	ld	a,(de)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   4
USBINC  Z80

  131                  A	cp	'/'		; Einleitung fuer Optionen?
  132                  A	jr	z,opt7
  133                  Agetopt:	ld	a,(de)		; Optionen testen
  134                  A	cp	'/'
  135                  A	jp	z,help		; // ist Hilfe
  136                  A	cp	'O'		; ungefragt ueberschreiben?
  137                  A	jr	nz,opt1
  138                  A	set	2,(hl)
  139                  A	res	3,(hl)
  140                  Aopt1:	cp	'T'		; Textdatei?
  141                  A	jr	nz,opt2
  142                  A	set	4,(hl)
  143                  Aopt2:	cp	'B'		; Binaerdatei?
  144                  A	jr	nz,opt3
  145                  A	res	4,(hl)
  146                  Aopt3:	cp	'V'		; alte Daten anzeigen?
  147                  A	jr	nz,opt4
  148                  A	set	0,(hl)
  149                  Aopt4:	cp	'S'		; Liste sortieren?
  150                  A	jr	nz,opt5
  151                  A	set	1,(hl)
  152                  Aopt5:	cp	'I'		; vorhandene Datei ignorieren?
  153                  A	jr	nz,opt6
  154                  A	res	2,(hl)
  155                  A	set	3,(hl)
  156                  Aopt6:	cp	'W'		; ausfuehrliche Anzeige?
  157                  A	jr	nz,opt7
  158                  A	set	5,(hl)
  159                  Aopt7:	cp	'M'		; Fortschrittsanzeige wie MTOOLs?
  160                  A	jr	nz,opt8
  161                  A	set	7,(hl)
  162                  Aopt8:	cp	'U'		; vorhandene Dateien aktualisieren?
  163                  A	jr	nz,opt9
  164                  A	set	2,(hl)
  165                  A	set	3,(hl)
  166                  Aopt9:	inc	de
  167                  A	djnz	getopt
  168                  A	endm
  169                  A
  170                  A; Synchronisieren mit Vinculum:
  171                  A;
  172                  A; PA:	CY=1	Break, TimeOut oder Error
  173                  A; VR:	AF,HL,BC
  174                  A
  175 0086'            Asynchr:
  176         0000     AIF KC85				; CPU-Taktfrequenz von D008 ermitteln!
  211                  AELSE ;KC85
  212                  A
  213                  A; PIO Port B initialisieren:
  214 0086' 3E CF      A	ld	a,0CFH		; Bitbetrieb
  215 0088' D3 DF      A	out	(piobs),a
  216 008A' 3E 33      A	ld	a,00110011b	; I/O festlegen
  217 008C' D3 DF      A	out	(piobs),a
  218 008E' 3E 07      A	ld	a,07H		; DI, Maske folgt nicht
  219 0090' D3 DF      A	out	(piobs),a
  220                  A;	ld	a,0FFH		; kein Bit aktiv
  221                  A;	out	(piobs),a
  222 0092' 3E C4      A	ld	a,0C4H		; #PROG=1, #RESET=1, RD&WR inaktiv
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   5
USBINC  Z80

  223 0094' D3 DD      A	out	(piob),a
  224                  A
  225                  A; PIO Port A initialisieren:
  226 0096' 3E 8F      A	ld	a,8FH		; bidirektional
  227 0098' D3 DE      A	out	(pioas),a
  228 009A' 3E 07      A	ld	a,07H		; kein INT
  229 009C' D3 DE      A	out	(pioas),a
  230 009E' DB DC      A	in	a,(pioa)	; Dummy-Eingabe
  231                  A
  232                  AENDIF ;KC85
  233                  A
  234                  A; dreistufiges Synchronisieren:
  235                  A
  236 00A0' 3A 0017'   Async:	LD	A,(TAKT)	; CPU-Taktfrequenz in MHz
  237 00A3' 47         A	LD	B,A
  238 00A4' 21 0000    A	LD	hl,0		; Startwert fuer Multiplikation
  239         0000     AIF KC85
  241                  AELSE
  242 00A7' 11 0258    A	ld	de,600		; Faktor fuer Zeitschleife bei CP/M-Version
  243                  AENDIF
  244 00AA' 19         AT3:	add	hl,de		; aufsummieren
  245 00AB' 10 FD      A	djnz	T3
  246 00AD' 54         A	ld	d,h
  247 00AE' 5D         A	ld	e,l		; DE = Zaehlerwert fuer Zeitschleife
  248 00AF' CD 0000#   Asyn0:	call	condin		; Tastatureingabe vorhanden?
  249 00B2' 28 ??      A	jr	z,syn1		; nein
  250 00B4' FE 03      A	cp	3		; Break?
  251 00B6' CA 0000    A	jp	z,0
  252 00B9' FE 1B      A	cp	esc		; ESC?
  253 00BB' CA 0000    A	jp	z,0
  254 00BE'            Asyn1:
  255         0000     AIF KC85
  258                  AELSE
  259 00BE' DB DD      A	in	a,(PIOB)	; Status abfragen
  260                  AENDIF
  261 00C0' 0F         A	rrca
  262 00C1' 38 ??      A	jr	c,syn2		; keine Daten vorhanden
  263 00C3' CD 0000#   A	call	get		; vorhandene Daten abholen
  264 00C6' 21 0016'   A	ld	hl,option
  265 00C9' CB 46      A	bit	0,(hl)
  266 00CB' C4 0000#   A	call	nz,crtx		; und anzeigen, wenn konfiguriert
  267 00CE' 18 D0      A	jr	sync
  268                  A	;
  269 00D0' 0F         Asyn2:	rrca	
  270 00D1' 38 CD      A	jr	c,sync		; noch nicht bereit, Daten zu schreiben
  271 00D3' 10 FE      A	djnz	$		; kurze Zeit warten
  272 00D5' 1B         A	dec	de
  273 00D6' 7A         A	ld	a,d		; Zaehler abwarten
  274 00D7' B3         A	or	e
  275 00D8' 20 D5      A	jr	nz,syn0		; nochmals nachschauen...
  276         0000     AIF KC85
  279                  AELSE
  280 00DA' DB DD      A	in	a,(PIOB)	; Status abfragen
  281                  AENDIF
  282 00DC' E6 03      A	and	3		; nur Bit 0 und 1 auswerten
  283 00DE' FE 01      A	cp	1		; alle Daten abgeholt und bereit zum schreiben?
  284 00E0' 20 BE      A	jr	nz,sync		; nein !
  285                  A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   6
USBINC  Z80

  286 00E2' 3E 0D      A	ld	a,cr
  287 00E4' CD 0000#   A	call	put		; <cr> muss irgendwie <cr> zurueckgeben
  288 00E7' CD 0000#   Asyn3:	call	get
  289 00EA' D8         A	ret	c		; BRK oder TimeOut
  290 00EB' FE 0D      A	cp	cr
  291 00ED' 20 F8      A	jr	nz,syn3
  292                  A
  293 00EF' 3E 45      A	ld	a,'E'		; E <cr> muss E <cr> zurueckgeben
  294 00F1' CD 0000#   A	call	put
  295 00F4' 3E 0D      A	ld	a,cr
  296 00F6' CD 0000#   A	call	put
  297 00F9' CD 0000#   Asyn4:	call	get		; Daten holen
  298 00FC' D8         A	ret	c		; BRK oder TimeOut
  299 00FD' FE 45      A	cp	'E'
  300 00FF' 20 F8      A	jr	nz,syn4
  301 0101' CD 0000#   A	call	get
  302 0104' D8         A	ret	c		; BRK oder TimeOut
  303 0105' FE 0D      A	cp	cr
  304 0107' 20 F0      A	jr	nz,syn4
  305                  A
  306 0109' 3E 65      A	ld	a,'e'		; e <cr> muss e <cr> zurueckgeben
  307 010B' CD 0000#   A	call	put
  308 010E' 3E 0D      A	ld	a,cr
  309 0110' CD 0000#   A	call	put
  310 0113' CD 0000#   Asyn5:	call	get		; Daten abholen
  311 0116' D8         A	ret	c		; BRK oder TimeOut
  312 0117' FE 65      A	cp	'e'
  313 0119' 20 F8      A	jr	nz,syn5
  314 011B' CD 0000#   A	call	get
  315 011E' D8         A	ret	c		; BRK oder TimeOut
  316 011F' FE 0D      A	cp	cr
  317 0121' 20 F0      A	jr	nz,syn5
  318 0123' C9         A	ret
  319                  A
  320         0000     AIF KC85
  378                  AELSE ;KC85
  379                  A
  380                  A; Eingabe von VDIP1 abholen (mit Break und TimeOut):
  381                  A; PA:	A	Datenbyte
  382                  A;	CY=1	TimeOut oder Break
  383                  A; VR:	AF
  384                  A
  385 0124' C5         AGET:	push	bc
  386 0125' 01 0000    A	ld	bc,0		; Zeitkonstante
  387 0128'            Aget4:
  388         0000     AIF BRKT
  396                  AENDIF
  397 0128' DB DD      A	in	a,(PIOB)	; Status abfragen
  398 012A' 0F         A	rrca			; Daten vorhanden?
  399 012B' 30 ??      A	jr	nc,get3		; ja, abholen
  400 012D' 03         A	inc	bc
  401 012E' 78         A	ld	a,b
  402 012F' B1         A	or	c		; TimeOut?
  403 0130' 20 F6      A	jr	nz,get4
  404 0132' CD 0000#   Aget2:	call	eprint
  405 0135' 54 69 6D 65A	db	'TimeOut Error',0
  406         0000     AIF BRKT
  412                  AENDIF
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   7
USBINC  Z80

  413 0143' C1         A	pop	bc
  414 0144' 37         A	scf			; Fehler
  415 0145' C9         A	ret
  416                  A	;
  417 0146' 3E C0      Aget3:	LD	A,0C0H		; RD# aktiv
  418 0148' D3 DD      A	OUT	(PIOB),A
  419 014A' DB DC      A	IN	A,(PIOA)	; Daten holen
  420 014C' 4F         A	LD	C,A
  421 014D' 3E C4      A	LD	A,0C4H		; RD# inaktiv
  422 014F' D3 DD      A	OUT	(PIOB),A
  423 0151' 79         A	LD	A,C
  424 0152' C1         A	pop	bc
  425 0153' B7         A	or	a		; CY=0 (OK)
  426 0154' C9         A	ret
  427                  A
  428                  A; Ausgabe zu VDIP1 senden:
  429                  A; PE:	A	Datenbyte
  430                  A; VR:	-
  431                  A
  432 0155' D3 DC      APUT:	OUT	(PIOA),A	; Daten
  433 0157' F5         A	push	af
  434 0158' DB DD      Aput1:	IN	A,(PIOB)	; Status abfragen
  435 015A' 0F         A	RRCA
  436 015B' 0F         A	RRCA
  437 015C' 38 FA      A	JR	C,put1		; nicht bereit, warten!
  438 015E' 3E CC      A	LD	A,0CCH
  439 0160' D3 DD      A	OUT	(PIOB),A	; WR aktiv
  440 0162' 3E C4      A	LD	A,0C4H
  441 0164' D3 DD      A	OUT	(PIOB),A	; WR inaktiv
  442 0166' F1         A	pop	af
  443 0167' C9         A	RET
  444                  AENDIF ;KC85
  445                  A
  446                  A; Kommando, gefolgt von Dateiname (fcb1) ausloesen:
  447                  A;
  448                  A; PE:	A	Kommando
  449                  A; PA:	CY=1	Fehler
  450                  A
  451 0168' CD 0155'   AOUTNAM:	CALL	PUT		; Kommando
  452 016B' 3E 20      A	LD	A,' '
  453 016D' CD 0155'   A	CALL	PUT
  454 0170' 21 005D    A	LD	HL,fcb1+1	; Dateiname
  455 0173' 06 0B      A	LD	B,11		; Laenge 8+3
  456 0175' 7E         AOPEN:	LD	A,(HL)
  457 0176' E5         A	push	hl
  458 0177' E6 7F      A	and	7fh		; Bit 7 ruecksetzen
  459 0179' 21 0000#   A	ld	hl,errchr
  460 017C' 0E 05      A	ld	c,5		; 5 verbotene Zeichen testen
  461 017E' BE         Aop1:	cp	(hl)
  462 017F' 20 ??      A	jr	nz,op2
  463 0181' 3E 5F      A	ld	a,'_'		; -> konvertieren
  464 0183' 23         Aop2:	inc	hl
  465 0184' 0D         A	dec	c
  466 0185' 20 F7      A	jr	nz,op1
  467 0187' E1         A	pop	hl
  468 0188' 23         A	INC	HL
  469 0189' FE 21      A	CP	21H		; Leerzeichen oder Steuerzeichen?
  470 018B' D4 0155'   A	CALL	nc,PUT		; Dateiname
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   8
USBINC  Z80

  471 018E' 78         A	ld	a,b
  472 018F' FE 04      A	cp	4
  473 0191' 3E 2E      A	ld	a,'.'		; Trennzeichen vor Dateityp
  474 0193' CC 0155'   A	call	z,PUT
  475 0196' 10 DD      A	DJNZ	OPEN
  476 0198' C9         A	ret
  477                  A	;
  478 0199' 5C 2F 22 7CAERRCHR:	DB	'\/"|+'		; Zeichen die unter DOS verboten sind
  479                  A
  480                  A; Vinculum-Kommando ausfuehren:
  481                  A;
  482                  A;PA:	CY=1	Fehler (VDIP1-Fehler oder BRK oder TimeOut)
  483                  A;VR:	AF
  484                  A
  485 019E' 3E 0D      AEXEC:	LD	A,CR	; Kommandoabschluss
  486 01A0' CD 0155'   A	CALL	PUT
  487 01A3' CD 0124'   Aex1:	CALL	GET	; Ergebnis holen
  488 01A6' D8         A	RET	C	; BRK oder TimeOut!
  489 01A7' FE 3E      A	CP	'>'
  490 01A9' 20 ??      A	JR	NZ,ERR
  491 01AB' CD 0124'   A	CALL	GET
  492 01AE' D8         A	RET	C
  493 01AF' FE 0D      A	CP	CR	; OK, fertig?
  494 01B1' C8         A	RET	Z
  495 01B2' CD 0000#   AERR:	CALL	CRTX	; Errorcode anzeigen
  496 01B5' CD 0124'   A	CALL	GET
  497 01B8' 38 ??      A	JR	C,EX3
  498 01BA' FE 0D      A	CP	CR	; Ende?
  499 01BC' 20 F4      A	JR	NZ,ERR
  500 01BE' CD 0000#   Aex3:	CALL	eprint
  501 01C1' 2D 45 72 72A	db	'-Error',0
  502 01C8' 37         A	SCF		; Fehler!
  503 01C9' C9         A	RET
  504                  A
  505                  A; spezielle CRT-Routine:
  506                  A;
  507                  A; PE:	A	Zeichencode
  508                  A; VR:	-
  509                  A
  510 01CA' F5         ACRTX:	push	af
  511 01CB' E6 7F      A	and	7fh		; Bit 7 abschneiden
  512 01CD' FE 20      A	cp	20h
  513 01CF' 30 ??      A	jr	nc,crt1		; darstellbares Zeichen!
  514 01D1' FE 0D      A	cp	cr
  515 01D3' 20 ??      A	jr	nz,crt2		; nur CR zulaessig
  516 01D5' CD 0000#   A	call	cout
  517 01D8' 3E 0A      A	ld	a,lf		; mit LF ergaenzen
  518 01DA' CD 0000#   Acrt1:	call	cout
  519 01DD' F1         Acrt2:	pop	af
  520 01DE' C9         A	ret
  521                  A
  522                  A; Anzeige UTools-Programmversion:
  523                  A
  524 01DF'            Aversion:
  525 01DF' CD 0000#   A	call	eprint
  526 01E2' 20 55 54 6FA	db	' UTools v',0
  527 01EC' 3A 0015'   A	ld	a,(vers)	; Versionsnummer BCD
  528 01EF' CD 0000#   A	call	verbcd
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   9
USBINC  Z80

  529 01F2' CD 0000#   A	call	eprint
  530         0000     AIF KC85
  532                  AELSE ;KC85
  533 01F5' 20 43 50 2FA	DB	' CP/M '
  534                  AENDIF ;KC85
  535 01FB' 20 20 28 63A	db	'  (c) 2008-2014, M. Leubner',cr,lf,0
  536 0219' C9         A	ret
  537                  A;
  538                  A; Versionsnummer x.y anzeigen
  539                  A; PE:	A	BCD-Wert
  540                  A; VR:	-
  541                  A;
  542 021A' F5         AVERBCD:	push	af
  543 021B' 1F         A	rra
  544 021C' 1F         A	rra
  545 021D' 1F         A	rra
  546 021E' 1F         A	rra
  547 021F' CD 0000#   A	call	ahex0		; hoeherwertigen Teil
  548 0222' 3E 2E      A	ld	a,'.'		; Trennzeichen
  549 0224' CD 0000#   A	call	cout
  550 0227' F1         A	pop	af		; niederwertigen Teil
  551 0228' F5         AAHEX0:	PUSH	AF
  552 0229' E6 0F      A	AND	0FH
  553 022B' C6 90      A	ADD	A,90H
  554 022D' 27         A	DAA
  555 022E' CE 40      A	ADC	A,40H
  556 0230' 27         A	DAA
  557 0231' CD 0000#   A	CALL	cout
  558 0234' F1         A	POP	AF
  559 0235' C9         A	RET
  560                  A
  561                  A;
  562                  A; Treiberumleitung deaktivieren (vor EXIT):
  563                  A; V1.4: vorher noch alle anliegenden Daten abholen
  564                  A;
  565         0000     AIF KC85
  599                  AELSE	; noch vorhandene Daten abholen wenn kein KC85:
  600 0236' DB DD      Adeinit:	in	a,(PIOB)	; Status abfragen
  601 0238' 0F         A	rrca
  602 0239' 38 ??      A	jr	c,deini2	; keine Daten vorhanden
  603 023B' CD 0124'   A	call	get		; vorhandene Daten abholen
  604 023E' 18 F6      A	jr	deinit
  605 0240' 10 FE      Adeini2:	djnz	$		; kurze Zeit warten
  606 0242' DB DD      A	in	a,(PIOB)	; Status-Kontrolle
  607 0244' E6 03      A	and	3		; nur Bit 0 und 1 auswerten
  608 0246' FE 01      A	cp	1		; alle Daten abgeholt und bereit zum schreiben?
  609 0248' 20 EC      A	jr	nz,deinit	; nein !
  610                  Aendif ;KC85
  611 024A' C9         A	ret
  612                  A
  613                  APROZENT	macro
  614                  A; Fortschrittsanzeige in Prozent der Dateigroesse berechnen und anzeigen
  615                  A;
  616                  A; PE:	(filesize0)	Gesamtgroesse
  617                  A;	(filesize)	Laufvariable (Rueckwartszaehler)
  618                  A;
  619                  A; VR:	alle
  620                  A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  10
USBINC  Z80

  621                  APROZ:	ld	a,(option)	; Fortschritt wie anzeigen?
  622                  A	rlca
  623                  A	jr	nc,PROZ0	; Fortschrittsanzeige in Prozent
  624                  A	ld	a,'#'
  625                  A	jp	cout		; Zeichen anzeigen fuer einen Datenblock
  626                  A	;
  627                  APROZ0:	LD	IX,FILESIZE0	; Gesamtdateigroesse
  628                  A	ld	de,(filesize)
  629                  A	ld	bc,(filesize+2)	; BCDE = restliche Anzahl
  630                  A	ld	a,(ix)
  631                  A	sub	e
  632                  A	ld	e,a
  633                  A	ld	a,(ix+1)
  634                  A	sbc	a,d
  635                  A	ld	d,a
  636                  A	ld	a,(ix+2)
  637                  A	sbc	a,c
  638                  A	ld	c,a
  639                  A	ld	a,(ix+3)
  640                  A	sbc	a,b
  641                  A	ld	b,a		; BCDE = abgearbeitete Groesse
  642                  A	ld	a,cr
  643                  A	call	cout		; Cursor an Zeilenanfang setzen
  644                  A	LD	A,(IX)
  645                  A	OR	(IX+1)
  646                  A	OR	(IX+2)
  647                  A	OR	(IX+3)
  648                  A	JR	Z,PROZ1		; Dateigroesse = 0 -> 100,0%
  649                  A	xor	a
  650                  A	ex	af,af'		; fuehrende Nullen ausblenden
  651                  A	call	ZIFFER		; Hunderter anzeigen
  652                  A	call	mul10		; BCDE * 10
  653                  A	call	ZIFFER		; Zehner anzeigen
  654                  A	call	mul10		; BCDE * 100
  655                  A	ld	a,'0'
  656                  A	ex	af,af'
  657                  A	call	ZIFFER		; Einer anzeigen
  658                  A	ld	a,','
  659                  A	call	cout		; Trennzeichen
  660                  A	call	mul10		; BCDE * 1000
  661                  A	call	ZIFFER		; Zehntel anzeigen
  662                  A	ld	a,'%'
  663                  A	jp	cout
  664                  APROZ1:	call	eprint
  665                  A	db	'100,0%',0
  666                  A	ret
  667                  A
  668                  A; 32-Bit-Zahl in BCDE mit 10 multiplizieren
  669                  A;
  670                  A; PE:	BCDE	32-Bit-Zahl
  671                  A; PA:	BCDE	Ergebnis
  672                  A;
  673                  Amul10:	SLA	E
  674                  A	RL	D
  675                  A	RL	C
  676                  A	RL	B	; *2
  677                  A	push	bc
  678                  A	push	de
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  11
USBINC  Z80

  679                  A	SLA	E
  680                  A	RL	D
  681                  A	RL	C
  682                  A	RL	B	; *4
  683                  A	SLA	E
  684                  A	RL	D
  685                  A	RL	C
  686                  A	RL	B	; *8
  687                  A	POP	HL
  688                  A	ADD	HL,DE
  689                  A	EX	DE,HL
  690                  A	POP	HL
  691                  A	ADC	HL,BC
  692                  A	LD	B,H
  693                  A	LD	C,L	; BCDE*10 (8+2)
  694                  A	ret
  695                  A
  696                  A; Verhaeltnis zweier 32-Bit-Zahlen BCD berechnen und anzeigen
  697                  A; (eine Stelle fuer Prozentanzeige)
  698                  A;
  699                  A; PE:	BCDE	32-Bit-Ziffer
  700                  A;	IX	Wertigkeit (Gesamtdateigroesse)
  701                  A;	A'	'0' wenn Ausgabe laeuft
  702                  A; PA:	BCDE	Rest, der bei der Teilung uebrig bleibt
  703                  A
  704                  AZIFFER:	LD	L,99H		; Zaehler
  705                  AZIFF1:	LD	A,L
  706                  A	ADD	A,1		; HL = HL+1 (BCD)
  707                  A	DAA
  708                  A	LD	L,A
  709                  A
  710                  A	LD	A,E
  711                  A	SUB	(IX)		; E = niederwertigstes Byte
  712                  A	LD	E,A
  713                  A	LD	A,D
  714                  A	SBC	A,(IX+1)	; D = mittleres Byte
  715                  A	LD	D,A
  716                  A	LD	A,C
  717                  A	SBC	A,(IX+2)	; C = hoeherwertiges Byte
  718                  A	LD	C,A
  719                  A	LD	A,B
  720                  A	SBC	A,(IX+3)	; B = hoechstwertiges Byte
  721                  A	LD	B,A
  722                  A	JR	NC,ZIFF1	; nochmal enthalten
  723                  A
  724                  A	LD	A,E
  725                  A	ADD	A,(IX)		; letzten Teil wieder addieren
  726                  A	LD	E,A
  727                  A	LD	A,D
  728                  A	ADC	A,(IX+1)
  729                  A	LD	D,A
  730                  A	LD	A,C
  731                  A	ADC	A,(IX+2)
  732                  A	LD	C,A
  733                  A	LD	A,B
  734                  A	ADC	A,(IX+3)
  735                  A	LD	B,A
  736                  A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  12
USBINC  Z80

  737                  A	LD	A,L
  738                  A	AND	0FH		; Zahler = null?
  739                  A	JR	NZ,ZIFF2	; nein, sofort anzeigen
  740                  A	EX	AF,AF'
  741                  A	PUSH	AF
  742                  A	EX	AF,AF'
  743                  A	POP	AF
  744                  A	OR	A		; laeuft Ausgabe schon?
  745                  A	RET	Z		; nein, keine fuehrende Nullen!
  746                  AZIFF2:	EX	AF,AF'
  747                  A	LD	A,'0'		; Ausgabe laeuft
  748                  A	EX	AF,AF'
  749                  A	OR	'0'		; Ziffer
  750                  A	JP	COUT		; anzeigen
  751                  A	endm
  752                  A
  753                  A;	end of include
   56                   
   57                   ;-----------------------------------------------------
   58                   
   59 024B' CD 01DF'    HELP:	call	version		; Programmversion
   60 024E' CD 0000#    	call	eprint
   61 0251' 0D 0A       	db	cr,lf
   62 0253' 20 55 47 45 	db	' UGET.COM liest Dateien vom USB-Stick.',cr,lf
   63 027B' 0D 0A       	db	cr,lf
   64 027D' 20 4B 6F 6D 	db	' Kommandoformen:',cr,lf
   65 028F' 20 20 20 55 	db	'   UGET <name> /opt     - Datei(en) in aktuelles Verzeichnis',cr,lf
   66 02CD' 20 20 20 55 	db	'   UGET <dir:name> /opt - Datei(en) in angegebenes Verzeichnis',cr,lf
   67 030D' 0D 0A       	db	cr,lf
   68 030F' 20 4F 70 74 	db	' Optionen:',cr,lf
   69 031B' 20 20 20 2F 	db	'   / - Anzeige der Hilfeseite',cr,lf,0
   70 033B' 21 0016'    	ld	hl,option
   71 033E' CB 46       	bit	0,(hl)
   72 0340' 20 ??       	jr	nz,h0
   73 0342' CD 0000#    	call	eprint
   74 0345' 20 20 20 56 	db	'   V - vorher anliegenden Meldungen anzeigen',cr,lf,0
   75 0374' 7E          h0:	ld	a,(hl)
   76 0375' E6 0C       	and	0ch
   77 0377' FE 02       	cp	2
   78 0379' 28 ??       	jr	z,h2
   79 037B' CD 0000#    	call	eprint
   80 037E' 20 20 20 49 	db	'   I - vorhandene Dateien ungefragt ignorieren',cr,lf,0
   81 03AF' FE 01       h2:	cp	1
   82 03B1' 28 ??       	jr	z,h3
   83 03B3' CD 0000#    	call	eprint
   84 03B6' 20 20 20 4F 	db	'   O - vorhandene Dateien ungefragt ersetzen',cr,lf,0
   85 03E5' FE 03       h3:	cp	3
   86 03E7' 28 ??       	jr	z,h4
   87 03E9' CD 0000#    	call	eprint
   88 03EC' 20 20 20 55 	db	'   U - vorhandene Dateien aktualisieren',cr,lf,0
   89 0416' CB 4E       h4:	bit	1,(hl)
   90 0418' 20 ??       	jr	nz,h1
   91 041A' CD 0000#    	call	eprint
   92 041D' 20 20 20 53 	db	'   S - sortiere Dateiliste',cr,lf,0
   93 043A'             h1:
   94 043A' CB 7E       	bit	7,(hl)
   95 043C' 20 ??       	jr	nz,h7
   96 043E' CD 0000#    	call	eprint
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  13
UGET    Z80

   97 0441' 20 20 20 4D 	db	'   M - Fortschrittsanzeige wie MTOOLs',cr,lf,0
   98 0469'             h7:
   99 0469' C7          	rst	0		; Abbruch
  100                   
  101                   ; Programmstart:
  102                   
  103 046A' 2A 0006     START:	LD	HL,(BDOS+1)
  104 046D' 2E 00       	LD	L,0
  105 046F' F9          	LD	SP,HL		; Stack unterhalb BDOS legen
  106 0470' 25          	dec	h
  107 0471' 22 0000#    	ld	(tpaend),hl	; Obergzenze fuer Verzeichnispuffer
  108 0474' 3A 005D     	ld	a,(FCB1+1)	; 1. Parameter testen
  109 0477' FE 2F       	cp	'/'
  110 0479' CA 024B'    	jp	z,help		; // ist Hilfe
  111 047C' FE 20       	cp	' '
  112 047E' CA 024B'    	jp	z,help		; kein Parameter -> Hilfe
  113                   	setopt			; Optionen setzen
   14 0481' 21 0016'   A	ld	hl,option	; Options-Flags
   15 0484' 11 006D    A	ld	de,fcb2+1	; Optionen in FCB2 testen
   16 0487' 06 0B      A	ld	b,11
   17 0489' 1A         A	ld	a,(de)
   18 048A' FE 2F      A	cp	'/'		; Einleitung fuer Optionen?
   19 048C' 28 ??      A	jr	z,opt7
   20 048E' 1A         Agetopt:	ld	a,(de)		; Optionen testen
   21 048F' FE 2F      A	cp	'/'
   22 0491' CA 024B'   A	jp	z,help		; // ist Hilfe
   23 0494' FE 4F      A	cp	'O'		; ungefragt ueberschreiben?
   24 0496' 20 ??      A	jr	nz,opt1
   25 0498' CB D6      A	set	2,(hl)
   26 049A' CB 9E      A	res	3,(hl)
   27 049C' FE 54      Aopt1:	cp	'T'		; Textdatei?
   28 049E' 20 ??      A	jr	nz,opt2
   29 04A0' CB E6      A	set	4,(hl)
   30 04A2' FE 42      Aopt2:	cp	'B'		; Binaerdatei?
   31 04A4' 20 ??      A	jr	nz,opt3
   32 04A6' CB A6      A	res	4,(hl)
   33 04A8' FE 56      Aopt3:	cp	'V'		; alte Daten anzeigen?
   34 04AA' 20 ??      A	jr	nz,opt4
   35 04AC' CB C6      A	set	0,(hl)
   36 04AE' FE 53      Aopt4:	cp	'S'		; Liste sortieren?
   37 04B0' 20 ??      A	jr	nz,opt5
   38 04B2' CB CE      A	set	1,(hl)
   39 04B4' FE 49      Aopt5:	cp	'I'		; vorhandene Datei ignorieren?
   40 04B6' 20 ??      A	jr	nz,opt6
   41 04B8' CB 96      A	res	2,(hl)
   42 04BA' CB DE      A	set	3,(hl)
   43 04BC' FE 57      Aopt6:	cp	'W'		; ausfuehrliche Anzeige?
   44 04BE' 20 ??      A	jr	nz,opt7
   45 04C0' CB EE      A	set	5,(hl)
   46 04C2' FE 4D      Aopt7:	cp	'M'		; Fortschrittsanzeige wie MTOOLs?
   47 04C4' 20 ??      A	jr	nz,opt8
   48 04C6' CB FE      A	set	7,(hl)
   49 04C8' FE 55      Aopt8:	cp	'U'		; vorhandene Dateien aktualisieren?
   50 04CA' 20 ??      A	jr	nz,opt9
   51 04CC' CB D6      A	set	2,(hl)
   52 04CE' CB DE      A	set	3,(hl)
   53 04D0' 13         Aopt9:	inc	de
   54 04D1' 10 BB      A	djnz	getopt
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  14
UGET    Z80

  114 04D3' CD 0000#    	call	putud		; DU: merken
  115 04D6' CD 0086'    	call	synchr		; Synchronisation
  116 04D9' DA 0000#    	jp	c,exit
  117                   
  118                   ; Test, ob USB-Stick angeschlossen ist:
  119                   
  120 04DC' 3E 10       	LD	A,SCS		; Short CMD-Modus
  121 04DE' CD 0155'    	CALL	put
  122 04E1' CD 019E'    	CALL	EXEC
  123 04E4' DA 0000#    	jp	c,exit		; Error
  124                   
  125 04E7' 3E 91       	LD	A,IPH		; HEX- bzw. BIN-Modus
  126 04E9' CD 0155'    	CALL	put
  127 04EC' CD 019E'    	CALL	EXEC
  128 04EF' DA 0000#    	jp	c,exit		; Error
  129                   
  130 04F2' CD 019E'    	call	exec		; Flash-Disk vorhanden?
  131 04F5' DA 0000#    	jp	c,exit
  132                   
  133                   ; Test ob Wildcards enthalten sind:
  134                   
  135 04F8' 3A 005C     	ld	a,(fcb1)	; Laufwerk
  136 04FB' 32 0000#    	ld	(drive),a
  137 04FE' 3A 0069     	ld	a,(fcb1+13)	; USER-Bereich
  138 0501' 32 0000#    	ld	(user),a
  139 0504' 21 005D     	ld	hl,fcb1+1	; Dateiname
  140 0507' 06 0B       	ld	b,11
  141 0509' 0E 00       	ld	c,0		; keine Wildcard
  142 050B' 7E          sw:	ld	a,(hl)
  143 050C' 23          	inc	hl
  144 050D' FE 3F       	cp	'?'		; Wildcard?
  145 050F' 20 ??       	jr	nz,now
  146 0511' 0E 01       	ld	c,1		; Wildcard gefunden
  147 0513' 10 F6       now:	djnz	sw
  148 0515' 79          	ld	a,c
  149 0516' 32 0000#    	ld	(wild),a	; hier eine 1 wenn mehrdeutiger Dateiname
  150 0519' B7          	or	a
  151 051A' CA 0000#    	jp	z,test0		; einzelne Datei direkt einlesen
  152                   
  153                   ; Verzeichnis lesen und sortieren:
  154                   
  155 051D' CD 0000#    	call	rd_dir		; Verzeichnis einlesen
  156 0520' DA 0000#    	jp	c,exit		; Fehler
  157 0523' 2A 0000#    	ld	hl,(count)	; Anzahl gefundener Dateien
  158 0526' CD 0000#    	call	phlfdc
  159 0529' CD 0000#    	call	eprint
  160 052C' 20 44 61 74 	db	' Datei(en)',0
  161 0537' 7C          	ld	a,h
  162 0538' B5          	or	l
  163 0539' CA 0000#    	jp	z,exit		; keine Dateien entsprechen der Maske!
  164 053C' CD 0000#    	call	sort		; Eintraege sortieren
  165 053F' CD 0000#    	call	eprint
  166 0542' 2C 20 6C 65 	db	', lesen:',cr,lf,0
  167 054D' 21 0001     	ld	hl,1
  168 0550' 22 0000#    	ld	(counter),hl	; lfd. Datei = 1
  169                   
  170                   ; FCB fuer naechste Datei erzeugen:
  171                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  15
UGET    Z80

  172 0553' 2A 0000#    next:	ld	hl,(table)
  173 0556' 5E          	ld	e,(hl)
  174 0557' 23          	inc	hl
  175 0558' 56          	ld	d,(hl)
  176 0559' 23          	inc	hl		; Tabelle gleich auf naechsten Eintrag setzen
  177 055A' 22 0000#    	ld	(table),hl
  178 055D' EB          	ex	de,hl		; Zeiger auf Eintrag jetzt in HL
  179 055E' 11 005C     	ld	de,fcb1
  180 0561' 3A 0000#    	ld	a,(drive)
  181 0564' 12          	ld	(de),a		; Laufwerk eintragen
  182 0565' 13          	inc	de
  183 0566' 01 000B     	ld	bc,11
  184 0569' ED B0       	ldir			; Name+Typ in FCB kopieren
  185 056B' AF          	xor	a
  186 056C' 12          	ld	(de),a		; FCB+12: Extent = 0
  187 056D' 13          	inc	de
  188 056E' 3A 0000#    	ld	a,(user)
  189 0571' 12          	ld	(de),a		; FCB+13: Userbereich eintragen
  190 0572' 13          	inc	de
  191 0573' 62          	ld	h,d
  192 0574' 6B          	ld	l,e		; HL=FCB+14
  193 0575' 36 00       	ld	(hl),0
  194 0577' 13          	inc	de		; DE=FCB+15
  195 0578' 01 0016     	ld	bc,22
  196 057B' ED B0       	ldir			; Rest von FCB loeschen
  197                   
  198 057D' CD 0000#    	call	eprint
  199 0580' 0D 0A       	db	cr,lf		; Leerzeile zwischen den Dateien
  200 0582' 44 61 74 65 	db	'Datei ',0
  201 0589' 2A 0000#    	ld	hl,(counter)
  202 058C' CD 0000#    	call	phlfdc		; Dateinummer
  203 058F' CD 0000#    	call	eprint
  204 0592' 20 76 6F 6E 	db	' von ',0
  205 0598' 2A 0000#    	ld	hl,(count)
  206 059B' CD 0000#    	call	phlfdc		; Gesamtanzahl
  207 059E' CD 0000#    	call	eprint
  208 05A1' 3A 0D 0A 00 	db	':',cr,lf,0
  209                   
  210                   ; Dateigroesse abfragen:
  211                   
  212 05A5' 3E 01       test0:	ld	a,dir		; DIR <dateiname>
  213 05A7' CD 0168'    	call	outnam		; um Dateigroesse zu ermitteln
  214 05AA' 3E 0D       	ld	a,cr
  215 05AC' CD 0155'    	call	put		; Kommando ausfuehren
  216                   
  217 05AF' CD 0124'    	call	get		; 1. Zeichen abholen
  218 05B2' DA 0000#    	jp	c,exit		; Break oder TimeOut
  219 05B5' FE 0D       	cp	cr
  220 05B7' C2 0000#    	jp	nz,err7		; nicht CR
  221 05BA' CD 0124'    test1:	call	get		; naechste Zeichen (Dateiname) abholen
  222 05BD' DA 0000#    	jp	c,exit		; Break oder TimeOut
  223 05C0' FE 0D       	cp	cr		; CR vor Leerzeichen?
  224 05C2' CA 0000#    	jp	z,err6		; dann Datei nicht vorhanden (CF-Error)
  225 05C5' FE 20       	cp	' '		; Trennzeichen?
  226 05C7' 20 F1       	jr	nz,test1
  227 05C9' 21 0000#    	ld	hl,filesize0	; Dateigroesse abholen
  228 05CC' 06 04       	ld	b,4		; 4 Byte
  229 05CE' CD 0124'    test2:	call	get
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  16
UGET    Z80

  230 05D1' DA 0000#    	jp	c,exit		; Break oder TimeOut
  231 05D4' 77          	ld	(hl),a
  232 05D5' 23          	inc	hl
  233 05D6' 10 F6       	djnz	test2
  234 05D8' CD 0124'    test3:	call	get
  235 05DB' DA 0000#    	jp	c,exit
  236 05DE' FE 0D       	cp	cr		; Zeilenende erkannt?
  237 05E0' 20 F6       	jr	nz,test3
  238 05E2' CD 0124'    	call	get
  239 05E5' DA 0000#    	jp	c,exit
  240 05E8' FE 3E       	cp	'>'		; Prompt?
  241 05EA' C2 0000#    	jp	nz,err7
  242 05ED' CD 0124'    	call	get
  243 05F0' DA 0000#    	jp	c,exit
  244 05F3' FE 0D       	cp	cr
  245 05F5' C2 0000#    	jp	nz,err7
  246                   
  247                   ; Dateigroesse in KByte umrechnen (fuer Anzeige):
  248                   
  249 05F8' ED 5B ????  	ld	de,(filesize0+2); High-Teil
  250 05FC' 2A 0000#    	ld	hl,(filesize0)	; Low-Teil
  251 05FF' 01 03FF     	ld	bc,1023		; aufrunden auf volle KByte
  252 0602' 09          	add	hl,bc
  253 0603' EB          	ex	de,hl
  254 0604' 01 0000     	ld	bc,0
  255 0607' ED 4A       	adc	hl,bc		; 32 Bit jetzt in HLDE
  256 0609' 06 0A       	ld	b,10
  257 060B' CB 3C       calc1:	srl	h
  258 060D' CB 1D       	rr	l
  259 060F' CB 1A       	rr	d
  260 0611' CB 1B       	rr	e
  261 0613' 10 F6       	djnz	calc1		; /1024
  262 0615' 7C          	ld	a,h
  263 0616' B5          	or	l
  264 0617' C2 0000#    	jp	nz,err3		; Datei ist 64MByte oder groesser!
  265 061A' ED 53 0000# 	ld	(kbyte),de
  266                   
  267                   ; Dateidatum ermitteln:
  268                   
  269 061E' 3E 2F       	ld	a,dirt		; DIR <dateiname>
  270 0620' CD 0168'    	call	outnam		; um Dateidatum zu ermitteln
  271 0623' 3E 0D       	ld	a,cr
  272 0625' CD 0155'    	call	put		; Kommando ausfuehren
  273                   
  274 0628' CD 0124'    	call	get		; 1. Zeichen abholen
  275 062B' DA 0000#    	jp	c,exit		; Break oder TimeOut
  276 062E' FE 0D       	cp	cr
  277 0630' DA 0000#    	jp	c,err7		; nicht CR
  278 0633' CD 0124'    test4:	call	get		; naechste Zeichen (Dateiname) abholen
  279 0636' DA 0000#    	jp	c,exit		; Break oder TimeOut
  280 0639' FE 0D       	cp	cr		; CR vor Leerzeichen?
  281 063B' CA 0000#    	jp	z,err6		; dann Datei nicht vorhanden (CF-Error)
  282 063E' FE 20       	cp	' '		; Trennzeichen?
  283 0640' 20 F1       	jr	nz,test4
  284 0642' 21 0000#    	ld	hl,data		; Dateidatum abholen
  285 0645' 06 0A       	ld	b,10		; 10 Byte
  286 0647' CD 0124'    test5:	call	get
  287 064A' DA 0000#    	jp	c,exit		; Break oder TimeOut
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  17
UGET    Z80

  288 064D' 77          	ld	(hl),a
  289 064E' 23          	inc	hl
  290 064F' 10 F6       	djnz	test5
  291 0651' CD 0124'    test6:	call	get
  292 0654' DA 0000#    	jp	c,exit
  293 0657' FE 0D       	cp	cr		; Zeilenende erkannt?
  294 0659' 20 F6       	jr	nz,test6
  295 065B' CD 0124'    	call	get
  296 065E' DA 0000#    	jp	c,exit
  297 0661' FE 3E       	cp	'>'		; Prompt?
  298 0663' C2 0000#    	jp	nz,err7
  299 0666' CD 0124'    	call	get
  300 0669' DA 0000#    	jp	c,exit
  301 066C' FE 0D       	cp	cr
  302 066E' C2 0000#    	jp	nz,err7
  303                   
  304                   ; Dateidatum konvertieren:
  305                   
  306 0671' 21 0000#    	ld	hl,data		; erster Wert
  307 0674' 11 0000#    	ld	de,Datum1
  308 0677' CD 0000#    	call	m2utim		; Erstellt-Datum konvertieren
  309 067A' 21 ????     	ld	hl,data+6	; dritter Wert
  310 067D' 11 0000#    	ld	de,Datum3
  311 0680' CD 0000#    	call	m2utim		; Aenderungs-Datum konvertieren
  312                   
  313                   ; Laufwerk + Userbereich einstellen:
  314                   
  315 0683' 3A 005C     	ld	a,(fcb1)
  316 0686' B7          	or	a		; LW angegeben?
  317 0687' 28 ??       	jr	z,nodrv
  318 0689' 3D          	dec	a
  319 068A' 5F          	ld	e,a
  320 068B' 0E 0E       	ld	c,_seldsk	; LW anwaehlen
  321 068D' CD 0005     	call	bdos
  322 0690' 0E 0C       nodrv:	ld	c,_getver
  323 0692' CD 0005     	call	bdos
  324 0695' D6 22       	sub	22h		; DU: nur bei CP/M 2.2 (ZSDOS) akzeptieren
  325 0697' 20 ??       	jr	nz,nousr
  326 0699' 3A 006B     	ld	a,(fcb1+15)
  327 069C' B7          	or	a
  328 069D' 20 ??       	jr	nz,nousr	; DU-Error
  329 069F' 3A 0069     	ld	a,(fcb1+13)
  330 06A2' 5F          	ld	e,a
  331 06A3' 0E 20       	ld	c,_setusr	; USER anwaehlen
  332 06A5' CD 0005     	call	bdos
  333 06A8'             nousr:
  334                   
  335                   ; neue CP/M-Datei erstellen:
  336                   
  337 06A8' 11 005C     	ld	de,fcb1
  338 06AB' CD 0000#    	call	initfcb
  339 06AE' CD 0000#    	call	f$open		; Datei bereits vorhanden?
  340 06B1' C2 0000#    	jp	nz,make		; nein, Datei einfach neu erstellen
  341                   
  342                   ; Dateidatum-Stempel lesen (1. Modify, 2. Create):
  343                   
  344 06B4' AF          	xor	a
  345 06B5' 32 0000#    	ld	(stempel),a	; zunaechst kein Stempel vorhanden
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  18
UGET    Z80

  346 06B8' 0E 0C       	ld	c,_getver
  347 06BA' CD 0005     	call	bdos		; CP/M Version holen
  348 06BD' FE 22       	cp	22h
  349 06BF' 20 ??       	jr	nz,OPC4		; nicht 2.2-kompatibel!
  350 06C1' 0E 30       	ld	c,_dosver
  351 06C3' CD 0005     	call	bdos		; erweiterte DOS-Version holen
  352 06C6' 7C          	ld	a,h
  353 06C7' FE 53       	cp	'S'		; ZSDOS?
  354 06C9' 28 ??       	jr	z,OPC1
  355 06CB' FE 44       	cp	'D'		; ZDDOS?
  356 06CD' 20 ??       	jr	nz,OPC4
  357 06CF' 21 0000#    OPC1:	ld	hl,Datum4	; Datumstempel
  358 06D2' CD 0000#    	call	setdma		; als DMA-Adresse setzen
  359 06D5' AF          	xor	a
  360 06D6' 32 0068     	ld	(fcb1+12),a	; Extent 0
  361 06D9' 32 006A     	ld	(fcb1+14),a	; Datenmodul 0
  362 06DC' 11 005C     	ld	de,fcb1
  363 06DF' 0E 66       	ld	c,_GETDAT
  364 06E1' CD 0005     	call	bdos		; Datumstempel lesen
  365 06E4' 3D          	dec	a
  366 06E5' 20 ??       	jr	nz,OPC4		; Fehler beim Stempel lesen!
  367 06E7' 3A ????     	ld	a,(Datum4+11)	; MONAT
  368 06EA' B7          	or	a		; Teste Modify-Datum
  369 06EB' 20 ??       	jr	nz,OPC3		; -> OK (Monat nicht 0)
  370 06ED' 11 ????     	ld	de,Datum4+10
  371 06F0' 21 0000#    	ld	hl,Datum4
  372 06F3' 01 0005     	ld	bc,5
  373 06F6' ED B0       	ldir			; Create-Datum verwenden
  374 06F8' 3A ????     	ld	a,(Datum4+11)	; MONAT
  375 06FB' B7          	or	a		; jetzt gueltig?
  376 06FC' 28 ??       	jr	z,OPC4		; kein Datum gefunden
  377 06FE' 3E 01       OPC3:	ld	a,1
  378 0700' 32 0000#    	ld	(stempel),a	; Stempel jetzt gueltig
  379 0703' CD 0000#    OPC4:	call	eprint
  380 0706' 56 6F 72 68 	db	'Vorhandene Datei ',0
  381 0718' 11 005D     	ld	de,fcb1+1
  382 071B' CD 0000#    	call	pfn2		; Dateiname anzeigen
  383 071E' 3A 0000#    	ld	a,(stempel)
  384 0721' B7          	or	a
  385 0722' 21 ????     	ld	hl,Datum4+10
  386 0725' C4 0000#    	call	nz,danz		; Datum anzeigen
  387 0728' 3A 0065     	ld	a,(fcb1+9)
  388 072B' 17          	rla			; R/O ?
  389 072C' 30 ??       	jr	nc,notro
  390 072E' CD 0000#    	call	eprint
  391 0731' 20 69 73 74 	db	' ist schreibgeschuetzt.',cr,lf,0
  392 074B' C3 0000#    	jp	zsx		; geht nur zu ignorieren...
  393                   
  394 074E' 21 0016'    notro:	ld	hl,option
  395 0751' 7E          	ld	a,(hl)
  396 0752' E6 0C       	and	0ch		; Option bei vorhandener Datei
  397 0754' FE 0C       	cp	0ch		; Datum auswerten?
  398 0756' 20 ??       	jr	nz,vorh		; nein
  399 0758' 3A 0000#    	ld	a,(stempel)
  400 075B' B7          	or	a
  401 075C' 28 ??       	jr	z,noo		; kein Datum bei vorhandener Datei!
  402                   
  403                   ; Datum vergleichen:
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  19
UGET    Z80

  404                   
  405 075E' 21 0000#    	ld	hl,Datum3	; Datum der zu lesenden Datei
  406 0761' 11 ????     	ld	de,Datum4+10	; Datum der vorhandenen Datei
  407 0764' 7E          	ld	a,(hl)		; Jahr (1978-2077)
  408 0765' D6 78       	sub	a,78h
  409 0767' 4F          	ld	c,a
  410 0768' 1A          	ld	a,(de)		; Jahr (1978-2077)
  411 0769' D6 78       	sub	a,78h
  412 076B' B9          	cp	c
  413 076C' 38 ??       	jr	c,ers		; Jahr neuer -> ersetzen
  414 076E' 20 ??       	jr	nz,ign		; Jahr aelter -> ignorieren
  415 0770' 06 04       	ld	b,4		; 4 weitere Bytes vergleichen
  416 0772' 23          dcomp:	inc	hl
  417 0773' 13          	inc	de
  418 0774' 1A          	ld	a,(de)
  419 0775' BE          	cp	(hl)
  420 0776' 38 ??       	jr	c,ers		; neuer -> ersetzen
  421 0778' 20 ??       	jr	nz,ign		; aelter -> ignorieren
  422 077A' 10 F6       	djnz	dcomp
  423 077C' CD 0000#    ign:	call	eprint
  424 077F' 20 6B 65 69 	db	' keine Aktualisierung.',cr,lf,0
  425 0798' C3 0000#    	jp	zsx		; gleich -> ignorieren
  426                   
  427 079B' CB 5E       vorh:	bit	3,(hl)		; ignorieren?
  428 079D' 28 ??       	jr	z,noi
  429 079F' CD 0000#    	call	eprint
  430 07A2' 20 77 69 72 	db	' wird ignoriert.',cr,lf,0
  431 07B5' C3 0000#    	jp	zsx
  432                   	;
  433 07B8' CB 56       noi:	bit	2,(hl)		; ungefragt ueberschreiben?
  434 07BA' 28 ??       	jr	z,noo
  435 07BC' CD 0000#    ers:	call	eprint
  436 07BF' 20 77 69 72 	db	' wird ersetzt.',cr,lf,0
  437 07D0' 18 ??       	jr	delete		; ja
  438                   	;
  439 07D2' CD 0000#    noo:	call	eprint
  440 07D5' 0D 0A 20 20 	db	cr,lf,'    ersetzen mit ',0
  441 07E9' 11 005D     	ld	de,fcb1+1
  442 07EC' CD 0000#    	call	pfn2		; Dateiname anzeigen
  443 07EF' 21 0000#    	ld	hl,Datum3
  444 07F2' CD 0000#    	call	danz		; Datum anzeigen
  445 07F5' CD 0000#    	call	eprint
  446 07F8' 20 28 6A 2F 	db	' (j/n)? ',0
  447 0801' CD 0000#    ask:	call	capin
  448 0804' FE 03       	cp	3		; Break?
  449 0806' CA 0000#    	jp	z,exit		; -> Abbruch
  450 0809' FE 4E       	cp	'N'
  451 080B' 28 ??       	jr	z,TOK		; nein
  452 080D' FE 4A       	cp	'J'
  453 080F' 20 F0       	jr	nz,ask
  454 0811' F5          tok:	push	af
  455 0812' CD 0000#    	call	cout		; Zeichen anzeigen
  456 0815' CD 0000#    	call	eprint
  457 0818' 0D 0A 00    	db	cr,lf,0		; und neue Zeile
  458 081B' F1          	pop	af
  459 081C' FE 4E       	cp	'N'
  460 081E' CA 0000#    	jp	z,zsx		; diese Datei nicht loeschen
  461 0821' 11 005C     delete:	ld	de,fcb1
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  20
UGET    Z80

  462 0824' CD 0000#    	call	f$delete	; Datei loeschen
  463 0827' C2 0000#    	jp	nz,err1
  464 082A' 11 005C     make:	ld	de,fcb1
  465 082D' CD 0000#    	call	initfcb
  466 0830' CD 0000#    	call	f$make		; Datei erzeugen
  467 0833' 3C          	inc	a
  468 0834' CA 0000#    	jp	z,err2		; Verzeichnis voll
  469                   
  470                   ; Empfang der Datei einleiten:
  471                   
  472 0837' CD 0000#    	call	eprint
  473 083A' 4C 65 73 65 	db	'Lese Datei ',0
  474 0846' 11 005D     	ld	de,fcb1+1
  475 0849' CD 0000#    	call	pfn2		; Dateiname anzeigen
  476 084C' CD 0000#    	call	eprint
  477 084F' 20 28 00    	db	' (',0
  478 0852' 2A 0000#    	ld	hl,(kbyte)
  479 0855' CD 0000#    	call	phlfdc		; Anzeige Dateigroesse
  480 0858' CD 0000#    	call	eprint
  481 085B' 20 4B 42 79 	db	' KByte',0
  482 0862' 21 0000#    	ld	hl,Datum3
  483 0865' CD 0000#    	call	danz		; Dateidatum anzeigen
  484 0868' CD 0000#    	call	eprint
  485 086B' 29 0D 0A 00 	db	')',cr,lf,0
  486                   
  487 086F' 3E 0E       	LD	A,OPR		; Open/read
  488 0871' CD 0168'    	call	outnam		; Datei zum lesen oeffnen
  489 0874' CD 019E'    	call	exec
  490 0877' DA 0000#    	jp	c,exit		; Fehler
  491                    
  492                   ; Daten lesen, Sektor fuer Sektor ...
  493                   
  494 087A' 11 0000#    	ld	de,filesize
  495 087D' 21 0000#    	ld	hl,filesize0
  496 0880' 01 0004     	ld	bc,4
  497 0883' ED B0       	ldir			; Dateigroesse in Laufvariable kopieren
  498 0885' 3A 0016'    	ld	a,(option)
  499 0888' 07          	rlca
  500 0889' D4 0000#    	call	nc,PROZ		; Anfangsanzeige in Prozent
  501                   
  502 088C' 21 0000#    READ:	ld	hl,filesize	; Dateigroesse
  503 088F' 7E          	ld	a,(hl)
  504 0890' 23          	inc	hl
  505 0891' B6          	or	(hl)
  506 0892' 23          	inc	hl
  507 0893' B6          	or	(hl)
  508 0894' 23          	inc	hl
  509 0895' B6          	or	(hl)
  510 0896' CA 0000#    	jp	z,close		; 0 => fertig
  511                   
  512 0899' 21 0080     	ld	hl,defdma	; DMA-Puffer
  513 089C' CD 0000#    	call	setdma		; im BDOS einstellen
  514 089F' 11 0081     	ld	de,defdma+1
  515 08A2' 01 007F     	ld	bc,127
  516 08A5' 36 1A       	ld	(hl),eof
  517 08A7' ED B0       	ldir			; vorbelegen mit 1AH
  518                   
  519 08A9' 06 80       	ld	b,128		; max. Puffergroesse
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  21
UGET    Z80

  520 08AB' 21 ????     	ld	hl,filesize+3	; Dateigroesse
  521 08AE' 7E          	ld	a,(hl)
  522 08AF' B7          	or	a
  523 08B0' 20 ??       	jr	nz,read1	; 4. Stelle > 0
  524 08B2' 2B          	dec	hl
  525 08B3' B6          	or	(hl)
  526 08B4' 20 ??       	jr	nz,read1	; 3. Stelle > 0
  527 08B6' 2B          	dec	hl
  528 08B7' B6          	or	(hl)
  529 08B8' 20 ??       	jr	nz,read1	; 2. Stelle > 0
  530 08BA' 2B          	dec	hl
  531 08BB' 7E          	ld	a,(hl)
  532 08BC' B8          	cp	b
  533 08BD' 30 ??       	jr	nc,read1	; 1. Stelle > 128
  534 08BF' 47          	ld	b,a		; der Rest
  535 08C0' 3E 0B       read1:	LD	A,RDF		; Read from File
  536 08C2' CD 0155'    	CALL	put
  537 08C5' 3E 20       	LD	A,' '
  538 08C7' CD 0155'    	CALL	put
  539 08CA' AF          	XOR	A
  540 08CB' CD 0155'    	CALL	put
  541 08CE' AF          	XOR	A
  542 08CF' CD 0155'    	CALL	put
  543 08D2' AF          	XOR	A
  544 08D3' CD 0155'    	CALL	put
  545 08D6' 78          	LD	A,B		; Anzahl
  546 08D7' 32 0000#    	ld	(fsize),a	; merken
  547 08DA' CD 0155'    	CALL	put
  548 08DD' 3E 0D       	LD	A,CR
  549 08DF' CD 0155'    	CALL	put
  550 08E2' 21 0080     	ld	hl,defdma	; Datenpuffer
  551 08E5' CD 0124'    READ2:	CALL	GET		; Daten lesen
  552 08E8' 38 ??       	JR	C,close		; Fehler -> Datei trotzdem schliessen
  553 08EA' 77          	LD	(HL),A
  554 08EB' 23          	INC	HL
  555 08EC' 10 F7       	DJNZ	READ2
  556 08EE' CD 01A3'    	call	ex1		; Prompt, cr testen
  557 08F1' DA 0000#    	jp	c,exit		; BRK/TimeOut
  558                   
  559 08F4' 11 005C     	ld	de,fcb1
  560 08F7' CD 0000#    	call	f$write		; Sektor in Datei schreiben
  561 08FA' C2 0000#    	jp	nz,err4		; Schreib-Fehler
  562                   
  563 08FD' 21 0000#    	ld	hl,filesize	; (restliche) Dateigroesse
  564 0900' 3A 0000#    	ld	a,(fsize)	; gelesene Blockgroesse
  565 0903' 47          	ld	b,a
  566 0904' 7E          	ld	a,(hl)
  567 0905' 90          	sub	b		; -128 (oder der Rest)
  568 0906' 77          	ld	(hl),a
  569 0907' 23          	inc	hl
  570 0908' 7E          	ld	a,(hl)
  571 0909' DE 00       	sbc	a,0
  572 090B' 77          	ld	(hl),a
  573 090C' 23          	inc	hl
  574 090D' 7E          	ld	a,(hl)
  575 090E' DE 00       	sbc	a,0
  576 0910' 77          	ld	(hl),a
  577 0911' 23          	inc	hl
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  22
UGET    Z80

  578 0912' 7E          	ld	a,(hl)
  579 0913' DE 00       	sbc	a,0
  580 0915' 77          	ld	(hl),a
  581                   
  582 0916' CD 0000#    	call	proz		; Fortschrittsanzeige
  583 0919' C3 088C'    	jp	read		; weiter lesen
  584                   
  585 091C' 11 005C     close:	ld	de,fcb1
  586 091F' CD 0000#    	call	f$close		; Datei schliessen
  587 0922' C2 0000#    	jp	nz,err5
  588 0925' 3E 0A       	LD	A,CLF		; Close File (USB)
  589 0927' CD 0168'    	CALL	outnam		; Datei schliessen
  590 092A' CD 019E'    	call	exec
  591 092D' DA 0000#    	jp	c,exit		; Fehler
  592                   
  593                   ; Dateidatum-Stempel schreiben:
  594                   
  595 0930' 0E 0C       	ld	c,_getver
  596 0932' CD 0005     	call	bdos		; CP/M Version holen
  597 0935' FE 22       	cp	22h
  598 0937' 20 ??       	jr	nz,notzs	; nicht 2.2-kompatibel!
  599 0939' 0E 30       	ld	c,_dosver
  600 093B' CD 0005     	call	bdos		; erweiterte DOS-Version holen
  601 093E' 7C          	ld	a,h
  602 093F' FE 53       	cp	'S'
  603 0941' 28 ??       	jr	z,zsd		; ZSDOS erkannt
  604 0943' FE 44       	cp	'D'
  605 0945' 28 ??       	jr	z,zsd		; ZDDOS erkannt
  606 0947' CD 0000#    notzs:	call	eprint
  607 094A' 20 2D 20 4F 	db	' - OK.',cr,lf,0
  608 0953' 18 ??       	jr	zsc
  609                   	;
  610 0955' 21 0000#    zsd:	ld	hl,Datum1	; Datumstempel
  611 0958' CD 0000#    	call	setdma		; als DMA-Adresse setzen
  612 095B' AF          	xor	a
  613 095C' 32 0068     	ld	(fcb1+12),a	; Extent 0
  614 095F' 32 006A     	ld	(fcb1+14),a	; Datenmodul 0
  615 0962' 11 005C     	ld	de,fcb1
  616 0965' 0E 67       	ld	c,_SETDAT
  617 0967' CD 0005     	call	bdos		; Datumstempel setzen
  618 096A' 3D          	dec	a
  619 096B' 20 DA       	jr	nz,notzs	; Fehler (nur beim Datum schreiben)
  620 096D' CD 0000#     	call	eprint
  621 0970' 20 2D 20 44 	db	' - Datum OK.',cr,lf,0
  622 097F' 2A 0000#    zsc:	ld	hl,(count2)
  623 0982' 23          	inc	hl		; uebertragene Dateien zaehlen
  624 0983' 22 0000#    	ld	(count2),hl
  625 0986' 3A 0000#    zsx:	ld	a,(wild)
  626 0989' B7          	or	a
  627 098A' CA 0000#    	jp	z,exit		; Einzeldatei -> fertig
  628 098D' 2A 0000#    	ld	hl,(count)
  629 0990' ED 5B 0000# 	ld	de,(counter)
  630 0994' ED 52       	sbc	hl,de
  631 0996' 28 ??       	jr	z,zus		; letzte Datei -> fertig
  632 0998' 13          	inc	de
  633 0999' ED 53 0000# 	ld	(counter),de
  634 099D' C3 0553'    	jp	next		; wiederholen fuer naechste Datei
  635                   	;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  23
UGET    Z80

  636 09A0' CD 0000#    zus:	call	eprint
  637 09A3' 0D 0A 5A 75 	db	cr,lf,'Zusammenfassung:  ',0
  638 09B8' 2A 0000#    	ld	hl,(count2)
  639 09BB' CD 0000#    	call	phlfdc		; Anzahl
  640 09BE' CD 0000#    	call	eprint
  641 09C1' 20 76 6F 6E 	db	' von ',0
  642 09C7' 2A 0000#    	ld	hl,(count)
  643 09CA' CD 0000#    	call	phlfdc		; Gesamtanzahl
  644 09CD' CD 0000#    	call	eprint
  645 09D0' 20 44 61 74 	db	' Dateien uebertragen.',cr,lf,0
  646 09E8' C3 0000#    	jp	exit
  647                   ;-------------------------------------------------------------------------------
  648                   ;
  649                   ; Fehlerbehandlung:
  650                   ;
  651 09EB' CD 0000#    err1:	call	eprint
  652 09EE' 56 6F 72 68 	db	'Vorhandene Datei kann nicht geloescht werden',cr,lf,0
  653 0A1D' C3 0000#    	jp	exit
  654                   ;
  655 0A20' CD 0000#    err2:	call	eprint
  656 0A23' 56 65 72 7A 	db	'Verzeichnis ist voll',cr,lf,0
  657 0A3A' C3 0000#    	jp	exit
  658                   ;
  659 0A3D' CD 0000#    err3:	call	eprint
  660 0A40' 44 61 74 65 	db	'Datei ist 64 MByte oder groesser!',cr,lf,0
  661 0A64' C3 0000#    	jp	exit
  662                   ;
  663 0A67' CD 0000#    err4:	call	eprint
  664 0A6A' 53 63 68 72 	db	'Schreibfehler (Diskette voll?)',cr,lf,0
  665 0A8B' C3 0000#    	jp	exit
  666                   ;
  667 0A8E' CD 0000#    err5:	call	eprint
  668 0A91' 44 61 74 65 	db	'Datei kann nicht geschlossen werden',cr,lf,0
  669 0AB7' 18 ??       	jr	exit
  670                   ;
  671 0AB9' CD 0000#    err6:	call	eprint
  672 0ABC' 44 61 74 65 	db	'Datei ',0
  673 0AC3' 11 005D     	ld	de,fcb1+1
  674 0AC6' CD 0000#    	call	pfn2		; Dateiname anzeigen
  675 0AC9' CD 0000#    	call	eprint
  676 0ACC' 20 61 75 66 	db	' auf USB-Stick nicht vorhanden',cr,lf,0
  677 0AED' 18 ??       	jr	exit
  678                   ;
  679 0AEF' CD 0000#    err7:	call	eprint
  680 0AF2' 55 6E 65 72 	db	'Unerwartete Vinculum-Antwort',cr,lf,0
  681 0B11' 18 ??       	jr	exit
  682                   ;
  683 0B13' CD 0000#    err8:	call	eprint
  684 0B16' 54 50 41 2D 	db	'TPA-Speicherueberlauf',cr,lf,0
  685                   
  686 0B2E' 3E 11       exit:	LD	A,ECS		; Extend. CMD-Modus
  687 0B30' CD 0155'    	CALL	put
  688 0B33' 3E 0D       	LD	A,CR
  689 0B35' CD 0155'    	CALL	put
  690 0B38' CD 0000#    	call	condin		; evtl. anstehendes BRK abfangen
  691 0B3B' CD 0000#    	call	getud		; DU: regenerieren
  692 0B3E' CD 0236'    	call	deinit		; Treiber deaktivieren
  693 0B41' C7          	rst	0
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  24
UGET    Z80

  694                   
  695                   ; Dateidatum anzeigen:
  696                   ; PE:	HL	Zeiger auf Datumsfeld im CP/M-Format
  697                   
  698 0B42' CD 0000#    danz:	call	eprint
  699 0B45' 2C 20 00    	db	', ',0
  700 0B48' 23          	inc	hl
  701 0B49' 23          	inc	hl
  702 0B4A' 7E          	ld	a,(hl)		; Tag
  703 0B4B' CD 0000#    	call	pa2hc
  704 0B4E' 3E 2E       	ld	a,'.'
  705 0B50' CD 0000#    	call	cout
  706 0B53' 2B          	dec	hl
  707 0B54' 7E          	ld	a,(hl)		; Monat
  708 0B55' CD 0000#    	call	pa2hc
  709 0B58' 3E 2E       	ld	a,'.'
  710 0B5A' CD 0000#    	call	cout
  711 0B5D' 2B          	dec	hl
  712 0B5E' 7E          	ld	a,(hl)		; Jahr
  713 0B5F' FE 78       	cp	78h
  714 0B61' 3E 19       	ld	a,19h		; Jahrhundert 1978-1999
  715 0B63' CE 00       	adc	a,0
  716 0B65' 27          	daa			; oder 2000-2077
  717 0B66' CD 0000#    	call	pa2hc
  718 0B69' 7E          	ld	a,(hl)		; Jahr
  719 0B6A' CD 0000#    	call	pa2hc
  720 0B6D' 3E 20       	ld	a,' '
  721 0B6F' CD 0000#    	call	cout
  722 0B72' 23          	inc	hl
  723 0B73' 23          	inc	hl
  724 0B74' 23          	inc	hl
  725 0B75' 7E          	ld	a,(hl)		; Stunde
  726 0B76' CD 0000#    	call	pa2hc
  727 0B79' 3E 3A       	ld	a,':'
  728 0B7B' CD 0000#    	call	cout
  729 0B7E' 23          	inc	hl
  730 0B7F' 7E          	ld	a,(hl)		; Minute
  731 0B80' CD 0000#    	call	pa2hc
  732 0B83' C9          	ret
  733                   
  734                   ; Verzeichnis einlesen von USB-Stick:
  735                   ;
  736                   ; PA:	CY=1	Fehler
  737                   
  738 0B84' CD 0000#    rd_dir:	call	eprint
  739 0B87' 53 63 61 6E 	db	'Scanne Directory, ',0
  740 0B9A' 3E 01       	ld	a,dir		; DIR
  741 0B9C' CD 0155'    	call	put
  742 0B9F' 3E 0D       	ld	a,cr		; ohne Parameter
  743 0BA1' CD 0155'    	call	put
  744                   
  745 0BA4' 21 0000#    	ld	hl,$memry	; Directoryeintraege hier ablegen
  746 0BA7' 22 0000#    	ld	(pointer),hl	; Zeiger setzen
  747 0BAA' 21 0000     	ld	hl,0
  748 0BAD' 22 0000#    	ld	(count),hl	; Anzahl
  749 0BB0' 22 0000#    	ld	(count2),hl	; Zaehler
  750 0BB3' 21 0000#    rd0:	ld	hl,data		; Datenpuffer fuer eine Zeile
  751 0BB6' 06 ??       	ld	b,size		; max. Puffergroesse
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  25
UGET    Z80

  752 0BB8' CD 0124'    rd1:	call	get		; Zeichen holen
  753 0BBB' D8          	ret	c		; Fehler
  754 0BBC' 77          	ld	(hl),a		; ablegen
  755 0BBD' 23          	inc	hl
  756 0BBE' FE 0D       	cp	cr
  757 0BC0' 28 ??       	jr	z,rd2		; CR erkannt
  758 0BC2' 10 F4       	djnz	rd1		; weiter bis Puffer voll ist
  759 0BC4' 21 0000#    rd2:	ld	hl,data
  760 0BC7' 7E          	ld	a,(hl)
  761 0BC8' FE 3E       	cp	'>'
  762 0BCA' C8          	ret	z		; Prompt erkannt -> fertig
  763 0BCB' FE 0D       	cp	cr
  764 0BCD' 28 E4       	jr	z,rd0		; Leerzeile -> ignorieren
  765                   
  766                   ; Eintrag in Puffer kopieren (ohne Verzeichnisse):
  767                   
  768 0BCF' 2A 0000#    	ld	hl,(pointer)	; Verzeichnispuffer
  769 0BD2' 11 0000#    	ld	de,data		; Datenpuffer
  770 0BD5' 1A          	ld	a,(de)		; erstes Zeichen testen
  771 0BD6' FE 2E       	cp	'.'		; Unterverzeichnis?
  772 0BD8' 28 D9       	jr	z,rd0		; weglassen!
  773 0BDA' 06 0B       	ld	b,11		; max. Laenge 8.3 (ohne Punkt)
  774 0BDC' 1A          mov1:	ld	a,(de)
  775 0BDD' 13          	inc	de
  776 0BDE' FE 20       	cp	' '		; Trennzeichen Verzeichnisname/DIR ?
  777 0BE0' 28 D1       	jr	z,rd0		; weglassen!
  778 0BE2' FE 2E       	cp	'.'		; Trennzeichen Dateiname/Typ?
  779 0BE4' 20 ??       	jr	nz,mov3
  780 0BE6' 78          mov2:	ld	a,b		; noch Zeichenanzahl
  781 0BE7' FE 04       	cp	4		; kleiner als 4?
  782 0BE9' 38 F1       	jr	c,mov1		; ja, wir sind richtig
  783 0BEB' 3E 20       	ld	a,' '
  784 0BED' 77          	ld	(hl),a		; Leerzeichen einfuegen
  785 0BEE' 23          	inc	hl		; ein Zeichen weiter gehen
  786 0BEF' 05          	dec	b		; und mitzaehlen
  787 0BF0' 18 F4       	jr	mov2
  788                   	;
  789 0BF2' FE 0D       mov3:	cp	cr		; fertig?
  790 0BF4' 20 ??       	jr	nz,mov4
  791 0BF6' 1B          	dec	de
  792 0BF7' 3E 20       	ld	a,' '		; Rest sind Leerzeichen
  793 0BF9' 77          mov4:	ld	(hl),a		; Zeichen ablegen
  794 0BFA' 23          	inc	hl
  795 0BFB' 10 DF       	djnz	mov1		; wiederholen fuer alle 12 Zeichen
  796                   
  797                   ; Test, ob Eintrag der Maske entspricht:
  798                   
  799 0BFD' 2A 0000#    	ld	hl,(pointer)	; abgelegter Dateiname
  800 0C00' 11 005D     	ld	de,fcb1+1	; Maske
  801 0C03' 06 0B       	ld	b,11		; Dateiname+Typ pruefen
  802 0C05' 1A          cop1:	ld	a,(de)
  803 0C06' FE 3F       	cp	'?'		; Wildcard in Maske?
  804 0C08' 28 ??       	jr	z,cop2
  805 0C0A' BE          	cp	(hl)
  806 0C0B' 20 A6       	jr	nz,rd0		; entspricht nicht der Maske!
  807 0C0D' 23          cop2:	inc	hl
  808 0C0E' 13          	inc	de
  809 0C0F' 10 F4       	djnz	cop1
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  26
UGET    Z80

  810                   
  811                   ; Test auf Ausschlussliste:
  812                   
  813 0C11' E5          	push	hl
  814 0C12' 21 0018'    	ld	hl,excl		; Liste auszuschliessender Dateien
  815 0C15' 0E 0A       	ld	c,10		; 10 Dateinamen
  816 0C17' ED 5B 0000# cd1:	ld	de,(pointer)	; neuer Testkandidat
  817 0C1B' 06 0B       	ld	b,11		; jeder mit Laenge 8+3
  818 0C1D' 3E 3F       cd2:	ld	a,'?'
  819 0C1F' BE          	cp	(hl)
  820 0C20' 28 ??       	jr	z,cd3		; passt immer
  821 0C22' 1A          	ld	a,(de)
  822 0C23' BE          	cp	(hl)
  823 0C24' 20 ??       	jr	nz,cd4		; nicht ausschliessen
  824 0C26' 23          cd3:	inc	hl
  825 0C27' 13          	inc	de
  826 0C28' 10 F3       	djnz	cd2
  827 0C2A' E1          	pop	hl
  828 0C2B' 18 86       	jr	rd0		; Datei ausschliessen!
  829                   	;
  830 0C2D' 23          cd4:	inc	hl
  831 0C2E' 10 FD       	djnz	cd4		; den Rest ignorieren
  832 0C30' 0D          	dec	c
  833 0C31' 20 E4       	jr	nz,cd1		; noch einmal testen
  834 0C33' D1          	pop	de
  835 0C34' ED 53 0000# 	ld	(pointer),de	; neuer Zeiger jetzt gueltig
  836 0C38' 2A 0000#    	ld	hl,(tpaend)
  837 0C3B' ED 52       	sbc	hl,de
  838 0C3D' DA 0B13'    	jp	c,err8		; TPA-Ueberlauf!
  839 0C40' 2A 0000#    	ld	hl,(count)
  840 0C43' 23          	inc	hl		; Eintraege zaehlen
  841 0C44' 22 0000#    	ld	(count),hl
  842 0C47' C3 0BB3'    	jp	rd0		; naechsten einlesen
  843                   
  844                   ; eingelesenes Verzeichnis alphabetisch sortieren
  845                   
  846                   ; 1. Zeigertabelle erzeugen:
  847                   
  848 0C4A' 2A 0000#    sort:	ld	hl,(pointer)	; Ende der Dateinamen ist
  849 0C4D' 22 0000#    	ld	(table),hl	; Beginn der Zeigertabelle
  850 0C50' ED 5B 0000# 	ld	de,(count)
  851 0C54' 19          	add	hl,de
  852 0C55' 19          	add	hl,de		; + 2 Byte je Eintrag
  853 0C56' EB          	ex	de,hl
  854 0C57' 2A 0000#    	ld	hl,(tpaend)	; TPA-Ende
  855 0C5A' ED 52       	sbc	hl,de
  856 0C5C' DA 0B13'    	jp	c,err8		; das reicht nicht!
  857                   
  858 0C5F' 2A 0000#    	ld	hl,(count)	; Anzahl Elemente
  859 0C62' E5          	push	hl
  860 0C63' 11 0000#    	ld	de,$memry	; Tabelle der Namen
  861 0C66' 2A 0000#    	ld	hl,(table)	; Zeigertabelle
  862 0C69' 01 000B     	ld	bc,11		; Laenge eines Eintrages
  863 0C6C' 73          BLORD:	ld	(hl),e
  864 0C6D' 23          	inc	hl
  865 0C6E' 72          	ld	(hl),d
  866 0C6F' 23          	inc	hl
  867 0C70' EB          	ex	de,hl
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  27
UGET    Z80

  868 0C71' 09          	add	hl,bc		; naechstes Element
  869 0C72' EB          	ex	de,hl
  870 0C73' E3          	ex	(sp),hl
  871 0C74' 2B          	dec	hl		; noch ein Element?
  872 0C75' 7C          	ld	a,h
  873 0C76' B5          	or	l
  874 0C77' E3          	ex	(sp),hl
  875 0C78' 20 F2       	jr	nz,BLORD
  876 0C7A' E1          	pop	hl
  877 0C7B' 2A 0000#    	ld	hl,(count)	; Anzahl
  878 0C7E' 2B          	dec	hl
  879 0C7F' 7C          	ld	a,h
  880 0C80' B5          	or	l
  881 0C81' C8          	ret	z		; nicht sortieren wenn Anzahl=1
  882 0C82' 21 0016'    	ld	hl,option
  883 0C85' CB 4E       	bit	1,(hl)
  884 0C87' C8          	ret	z		; unsortiert abarbeiten
  885 0C88' CD 0000#    	call	eprint
  886 0C8B' 2C 20 73 6F 	db	', sortieren',0
  887                   
  888                   ;
  889                   ; 2. Sortieren ueber Zeiger-Methode
  890                   ; (Shell-SORT von "Software Tools", Kernigan/Plaugher, (c) 1976)
  891                   ;
  892 0C97' 2A 0000#    	ld	hl,(count)	; Anzahl Elemente
  893 0C9A' 22 0000#    	ld	(GAP),hl	; GAP fuer ersten Vergleich initialisieren
  894 0C9D' 2A 0000#    SORT0:	ld	hl,(GAP)
  895 0CA0' CB 3C       	srl	h
  896 0CA2' CB 1D       	rr	l		; GAP:=GAP/2
  897 0CA4' 7D          	ld	a,l
  898 0CA5' B4          	or	h
  899 0CA6' C8          	ret	z		; fertig, wenn GAP/2=0
  900 0CA7' CB 45       	bit	0,l		; GAP ungeradzahlig?
  901 0CA9' 20 ??       	jr	nz,SORT1
  902 0CAB' 2B          	dec	hl		; GAP ungerade machen
  903 0CAC' 22 0000#    SORT1:	ld	(GAP),hl
  904 0CAF' 22 0000#    SORT2:	ld	(J),hl		; J:=GAP
  905                   ;
  906                   ; For (J=GAP+1; J<=N; J=J+1)
  907                   ;
  908 0CB2' 2A 0000#    RIGHT:	ld	hl,(J)
  909 0CB5' 23          	inc	hl		; J:=J+1
  910 0CB6' 22 0000#    	ld	(J),hl
  911 0CB9' EB          	ex	de,hl		; DE=(J)
  912 0CBA' 2A 0000#    	ld	hl,(count)
  913 0CBD' B7          	or	a
  914 0CBE' ED 52       	sbc	hl,de		; Anzahl-J
  915 0CC0' 38 DB       	jr	c,SORT0		; neu starten, wenn I > N
  916                   ;
  917                   ; For (I=J-GAP; J>0; I=J-GAP)
  918                   ;
  919 0CC2' 2A 0000#    LEFT:	ld	hl,(GAP)
  920 0CC5' EB          	ex	de,hl
  921 0CC6' ED 52       	sbc	hl,de		; I:=J-GAP
  922 0CC8' 38 E8       	jr	c,RIGHT		; wenn J < 0
  923 0CCA' 28 E6       	jr	z,RIGHT		; wenn J = 0
  924                   ;
  925                   ; Set JG=I+GAP
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  28
UGET    Z80

  926                   ;
  927 0CCC' EB          	ex	de,hl
  928 0CCD' 19          	add	hl,de		; JG:=I+GAP
  929                   ;
  930                   ; If (I) <= (JG) then Break else Exchange
  931                   ;
  932 0CCE' E5          	push	hl
  933 0CCF' D5          	push	de
  934 0CD0' CD 0000#    	call	COMPAR		; Vergleich
  935 0CD3' D1          	pop	de
  936 0CD4' E1          	pop	hl
  937 0CD5' 28 DB       	jr	z,RIGHT		; Dateiname gleich (sollte nicht vorkommen!)
  938 0CD7' 30 D9       	jr	nc,RIGHT	; richtig sortiert
  939 0CD9' D5          	push	de
  940 0CDA' CD 0000#    	call	SWAP		; Austausch
  941 0CDD' D1          	pop	de
  942 0CDE' 18 E2       	jr	LEFT		; zurueck furr weitere Tests
  943                   ;
  944                   ; Zeiger zweier Elemente austauschen
  945                   ; PE:	HL,DE	Nummer der Elemente
  946                   ; VR:	AF,BC,DE,HL
  947                   ;
  948 0CE0' ED 4B 0000# SWAP:	ld	bc,(table)	; Adresstabelle
  949 0CE4' 0B          	dec	bc
  950 0CE5' 0B          	dec	bc
  951 0CE6' 29          	add	hl,hl		; *2
  952 0CE7' 09          	add	hl,bc		; 1. Element
  953 0CE8' EB          	ex	de,hl
  954 0CE9' 29          	add	hl,hl		; *2
  955 0CEA' 09          	add	hl,bc		; 2. Element
  956 0CEB' CD 0000#    	call	SWAP1		; erst aufrufen, dann reinlaufen
  957 0CEE' 4E          SWAP1:	ld	c,(hl)
  958 0CEF' 1A          	ld	a,(de)
  959 0CF0' EB          	ex	de,hl
  960 0CF1' 71          	ld	(hl),c
  961 0CF2' 12          	ld	(de),a
  962 0CF3' 23          	inc	hl
  963 0CF4' 13          	inc	de
  964 0CF5' C9          	RET
  965                   ;
  966                   ; Zwei Eintraege ueber deren Zeiger vergleichen
  967                   ; PE:	HL,DE	Nummer der Elemente
  968                   ; PA:	CY=1	(HL) > (DE)
  969                   ;	Z=1	Namen gleich, dann
  970                   ;		CY'=1	(HL) > (DE) bei Vergleich der EXT-Nummer
  971                   ; VR:	AF,BC,DE,HL
  972                   ;
  973 0CF6' ED 4B 0000# COMPAR:	ld	bc,(table)	; Adresstabelle
  974 0CFA' 0B          	dec	bc
  975 0CFB' 0B          	dec	bc
  976 0CFC' 29          	add	hl,hl		; *2
  977 0CFD' 09          	add	hl,bc		; 1. Element
  978 0CFE' EB          	ex	de,hl
  979 0CFF' 29          	add	hl,hl		; *2
  980 0D00' 09          	add	hl,bc		; 2. Element
  981 0D01' EB          	ex	de,hl
  982 0D02' 4E          	ld	c,(hl)
  983 0D03' 23          	inc	hl
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  29
UGET    Z80

  984 0D04' 46          	ld	b,(hl)		; BC ist Adresse des ersten Elements
  985 0D05' EB          	ex	de,hl
  986 0D06' 59          	ld	e,c
  987 0D07' 50          	ld	d,b		; DE ist Adresse des ersten Elements
  988 0D08' 4E          	ld	c,(hl)
  989 0D09' 23          	inc	hl
  990 0D0A' 66          	ld	h,(hl)
  991 0D0B' 69          	ld	l,c		; HL ist Adresse des zweiten Elements
  992 0D0C' 06 0B       	ld	b,11		; Anzahl Zeichen 8.3
  993 0D0E' 1A          CMPLE:	ld	a,(de)
  994 0D0F' BE          	cp	(hl)		; Vergleich
  995 0D10' 13          	inc	de
  996 0D11' 23          	inc	hl
  997 0D12' C0          	ret	nz		; Ende, sobald ungleich
  998 0D13' 10 F9       	djnz	CMPLE
  999 0D15' C9          	ret
 1000                   
 1001                   	prozent			; Fortschrittsanzeige aus USBINC einbinden
    8 0D16' 3A 0016'   APROZ:	ld	a,(option)	; Fortschritt wie anzeigen?
    9 0D19' 07         A	rlca
   10 0D1A' 30 ??      A	jr	nc,PROZ0	; Fortschrittsanzeige in Prozent
   11 0D1C' 3E 23      A	ld	a,'#'
   12 0D1E' C3 0000#   A	jp	cout		; Zeichen anzeigen fuer einen Datenblock
   14 0D21' DD 21 0000#APROZ0:	LD	IX,FILESIZE0	; Gesamtdateigroesse
   15 0D25' ED 5B 0000#A	ld	de,(filesize)
   16 0D29' ED 4B ???? A	ld	bc,(filesize+2)	; BCDE = restliche Anzahl
   17 0D2D' DD 7E 00   A	ld	a,(ix)
   18 0D30' 93         A	sub	e
   19 0D31' 5F         A	ld	e,a
   20 0D32' DD 7E 01   A	ld	a,(ix+1)
   21 0D35' 9A         A	sbc	a,d
   22 0D36' 57         A	ld	d,a
   23 0D37' DD 7E 02   A	ld	a,(ix+2)
   24 0D3A' 99         A	sbc	a,c
   25 0D3B' 4F         A	ld	c,a
   26 0D3C' DD 7E 03   A	ld	a,(ix+3)
   27 0D3F' 98         A	sbc	a,b
   28 0D40' 47         A	ld	b,a		; BCDE = abgearbeitete Groesse
   29 0D41' 3E 0D      A	ld	a,cr
   30 0D43' CD 0000#   A	call	cout		; Cursor an Zeilenanfang setzen
   31 0D46' DD 7E 00   A	LD	A,(IX)
   32 0D49' DD B6 01   A	OR	(IX+1)
   33 0D4C' DD B6 02   A	OR	(IX+2)
   34 0D4F' DD B6 03   A	OR	(IX+3)
   35 0D52' 28 ??      A	JR	Z,PROZ1		; Dateigroesse = 0 -> 100,0%
   36 0D54' AF         A	xor	a
   37 0D55' 08         A	ex	af,af'		; fuehrende Nullen ausblenden
   38 0D56' CD 0000#   A	call	ZIFFER		; Hunderter anzeigen
   39 0D59' CD 0000#   A	call	mul10		; BCDE * 10
   40 0D5C' CD 0000#   A	call	ZIFFER		; Zehner anzeigen
   41 0D5F' CD 0000#   A	call	mul10		; BCDE * 100
   42 0D62' 3E 30      A	ld	a,'0'
   43 0D64' 08         A	ex	af,af'
   44 0D65' CD 0000#   A	call	ZIFFER		; Einer anzeigen
   45 0D68' 3E 2C      A	ld	a,','
   46 0D6A' CD 0000#   A	call	cout		; Trennzeichen
   47 0D6D' CD 0000#   A	call	mul10		; BCDE * 1000
   48 0D70' CD 0000#   A	call	ZIFFER		; Zehntel anzeigen
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  30
UGET    Z80

   49 0D73' 3E 25      A	ld	a,'%'
   50 0D75' C3 0000#   A	jp	cout
   51 0D78' CD 0000#   APROZ1:	call	eprint
   52 0D7B' 31 30 30 2CA	db	'100,0%',0
   53 0D82' C9         A	ret
   60 0D83' CB 23      Amul10:	SLA	E
   61 0D85' CB 12      A	RL	D
   62 0D87' CB 11      A	RL	C
   63 0D89' CB 10      A	RL	B	; *2
   64 0D8B' C5         A	push	bc
   65 0D8C' D5         A	push	de
   66 0D8D' CB 23      A	SLA	E
   67 0D8F' CB 12      A	RL	D
   68 0D91' CB 11      A	RL	C
   69 0D93' CB 10      A	RL	B	; *4
   70 0D95' CB 23      A	SLA	E
   71 0D97' CB 12      A	RL	D
   72 0D99' CB 11      A	RL	C
   73 0D9B' CB 10      A	RL	B	; *8
   74 0D9D' E1         A	POP	HL
   75 0D9E' 19         A	ADD	HL,DE
   76 0D9F' EB         A	EX	DE,HL
   77 0DA0' E1         A	POP	HL
   78 0DA1' ED 4A      A	ADC	HL,BC
   79 0DA3' 44         A	LD	B,H
   80 0DA4' 4D         A	LD	C,L	; BCDE*10 (8+2)
   81 0DA5' C9         A	ret
   91 0DA6' 2E 99      AZIFFER:	LD	L,99H		; Zaehler
   92 0DA8' 7D         AZIFF1:	LD	A,L
   93 0DA9' C6 01      A	ADD	A,1		; HL = HL+1 (BCD)
   94 0DAB' 27         A	DAA
   95 0DAC' 6F         A	LD	L,A
   97 0DAD' 7B         A	LD	A,E
   98 0DAE' DD 96 00   A	SUB	(IX)		; E = niederwertigstes Byte
   99 0DB1' 5F         A	LD	E,A
  100 0DB2' 7A         A	LD	A,D
  101 0DB3' DD 9E 01   A	SBC	A,(IX+1)	; D = mittleres Byte
  102 0DB6' 57         A	LD	D,A
  103 0DB7' 79         A	LD	A,C
  104 0DB8' DD 9E 02   A	SBC	A,(IX+2)	; C = hoeherwertiges Byte
  105 0DBB' 4F         A	LD	C,A
  106 0DBC' 78         A	LD	A,B
  107 0DBD' DD 9E 03   A	SBC	A,(IX+3)	; B = hoechstwertiges Byte
  108 0DC0' 47         A	LD	B,A
  109 0DC1' 30 E5      A	JR	NC,ZIFF1	; nochmal enthalten
  111 0DC3' 7B         A	LD	A,E
  112 0DC4' DD 86 00   A	ADD	A,(IX)		; letzten Teil wieder addieren
  113 0DC7' 5F         A	LD	E,A
  114 0DC8' 7A         A	LD	A,D
  115 0DC9' DD 8E 01   A	ADC	A,(IX+1)
  116 0DCC' 57         A	LD	D,A
  117 0DCD' 79         A	LD	A,C
  118 0DCE' DD 8E 02   A	ADC	A,(IX+2)
  119 0DD1' 4F         A	LD	C,A
  120 0DD2' 78         A	LD	A,B
  121 0DD3' DD 8E 03   A	ADC	A,(IX+3)
  122 0DD6' 47         A	LD	B,A
  124 0DD7' 7D         A	LD	A,L
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  31
UGET    Z80

  125 0DD8' E6 0F      A	AND	0FH		; Zahler = null?
  126 0DDA' 20 ??      A	JR	NZ,ZIFF2	; nein, sofort anzeigen
  127 0DDC' 08         A	EX	AF,AF'
  128 0DDD' F5         A	PUSH	AF
  129 0DDE' 08         A	EX	AF,AF'
  130 0DDF' F1         A	POP	AF
  131 0DE0' B7         A	OR	A		; laeuft Ausgabe schon?
  132 0DE1' C8         A	RET	Z		; nein, keine fuehrende Nullen!
  133 0DE2' 08         AZIFF2:	EX	AF,AF'
  134 0DE3' 3E 30      A	LD	A,'0'		; Ausgabe laeuft
  135 0DE5' 08         A	EX	AF,AF'
  136 0DE6' F6 30      A	OR	'0'		; Ziffer
  137 0DE8' C3 0000#   A	JP	COUT		; anzeigen
 1002                   
 1003                   ; Datenbereich:
 1004                   
 1005                   	DSEG
 1006 0000" 00          drive:		db	0	; Kopie von Laufwerk aus FCB1+0
 1007 0001" 00          user:		db	0	; Kopie von User aus FCB1+13
 1008 0002" 00          wild:		db	0	; mehrdeutiger Dateiname?
 1009 0003" 00          fsize:		db	0	; Blockgroesse (128 oder weniger)
 1010 0004" 0000  0000  filesize0:	dw	0,0	; Dateigroesse in Byte
 1011 0008" 0000  0000  filesize:	dw	0,0	; Dateigroesse in Byte - Laufvariable
 1012 000C" 0000        kbyte:		dw	0	; Dateigroesse in KByte
 1013 000E" 00          stempel:	db	0	; Datumstempel vorhanden?
 1014         001E      size	equ	30		; Puffergroesse
 1015 000F" 00 00 00 00 data:		ds	size,0	; Datenpuffer fuer DIR und DIRT
 1016                   
 1017 002D" 00 00 00 00 Datum1:		DS	5,0	; Erstellt-Datum im CP/M-Format (BCD)
 1018 0032" 00 00 00 00 Datum2:		DS	5,0	; Zugriff-Datum - bleibt Null!
 1019 0037" 00 00 00 00 Datum3:		DS	5,0	; Modify-Datum im CP/M-Format (BCD)
 1020         0037"     JAHR	equ	Datum3
 1021         0038"     MONAT	equ	Datum3+1
 1022         0039"     TAG	equ	Datum3+2
 1023         003A"     STUNDE	equ	Datum3+3
 1024         003B"     MINUTE	equ	Datum3+4
 1025 003C" 00 00 00 00 Datum4:		DS	15,0	; zweites Datumsfeld fuer vorhandene CP/M-Datei
 1026 004B" 0000        pointer:	dw	0	; Zeiger Verzeichnispuffer
 1027 004D" 0000        count:		dw	0	; Anzahl Dateien
 1028 004F" 0000        count2:		dw	0	; Zaehler fuer uebertragene Dateien
 1029 0051" 0000        counter:	dw	0	; laufende Nummer
 1030 0053" 0000        table:		dw	0	; Zeiger auf Beginn der Zeigertabelle (Sort)
 1031 0055" 0000        GAP:		dw	0	; Variable fuer SORT
 1032 0057" 0000        J:		dw	0	;	"	"
 1033                   
 1034 0059" 0000        tpaend:		dw	0	; nutzbare TPA-Endadresse
 1035                   	END
 0 Error(s) Detected. 3563 Program Bytes. 91 Data Bytes.
 222 Symbols Detected.

 1019 0037" 00 00 00 00 Datum3:		DS	5,0	; Modify-Datum im CP/M-Format (BCD)
 1020        