Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   1
UDIR    Z80

    1                   ;-----------------------------------------------------
    2                   ;
    3                   ;	UTools Version 1.5 (von M. Leubner)
    4                   ;
    5                   ; Hilfsprogramme zur Arbeit mit USB-Sticks unter CP/M
    6                   ;
    7                   ;	Verzeichnis vom USB-Stick anzeigen
    8                   ;
    9                   ; UDIR.Z80 -> UDIR.COM	18.01.2008 - 01.12.2014
   10                   ;-----------------------------------------------------
   11                   ; Uebersetzung:		SLRZ80 UDIR/R
   12                   ;			SLRNK UDIR/N,/V,/A:100,UDIR,/E
   13                   ;			ERA UDIR.REL
   14                   ;-----------------------------------------------------
   15                   
   16                   	.Z80
   17                   	CSEG
   18                   
   19 0000' C3 0000#    	JP	START		; eigentlicher Programstart
   20 0003' 5A 33 45 4E 	DB	'Z3ENV'		; ENV von Z-System
   21 0008' 01          	DB	1		; Typ-1
   22 0009' 0000        ENVPTR:	DW	0		; Zeiger zu ENV-Beschreibung
   23 000B' 0100        	DW	100h		; ORG-Adresse
   24                   
   25                   ; Konfigurationsdatenbereich:
   26                   
   27 000D' 55 53 42 31 	DB	'USB14   '	; Name der CFG-Datei
   28 0015' 15          VERS:	DB	15H		; Version 1.5
   29 0016' 02          OPTION:	DB	00000010b	; Optionen (Voreinstellung):
   30                   ;	Bit 0	       ^--------- Anzeige der noch vorhandenen Daten bei Start
   31                   ;	Bit 1	      ^---------- Verzeichnis sortieren?
   32                   ;	Bit 3+2	    ^^----------- 00 nachfragen
   33                   ;	Bit 3+2	    ^^----------- 01 ueberschreiben
   34                   ;	Bit 3+2	    ^^----------- 10 ignorieren
   35                   ;	Bit 3+2	    ^^----------- 11 update nach Dateidatum
   36                   ;	Bit 4	   ^------------- Textdatei?
   37                   ;	Bit 5	  ^-------------- Ausfuehrliche Verzeichnisanzeige
   38                   ;	Bit 6	 ^--------------- noch frei (evtl. Druckprotokoll?)
   39                   ;	Bit 7	^---------------- Fortschrittsanzeige (0=% 1=#)
   40 0017' ??          TAKT:	DB	FREQ		; CPU-Taktfrequenz in MHz
   41                   
   42 0018' 20 20 20 20 excl:	DS	10*11,' '	; 10 auszuschliessende Dateien
   43                   
   44                   ;-----------------------------------------------------
   45                   
   46                   	include	USBINC.Z80	; allgemeine Unterprogramme
    1                  A;-----------------------------------------------------
    2                  A;
    3                  A;	UTools Version 1.5 (von M. Leubner)
    4                  A;
    5                  A; Hilfsprogramme zur Arbeit mit USB-Sticks unter CP/M
    6                  A;
    7                  A;	gemeinsam genutzte Unterprogramme
    8                  A;
    9                  A; USBINC.Z80 (Include)	    18.01.2008 - 03.12.2014
   10                  A;-----------------------------------------------------
   11                  A
   12         0000     AKC85	EQU	0	; 0 wenn PIO im CP/M direkt ansprechbar ist.
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   2
USBINC  Z80

   13                  A			; 1 wenn PIO nur ueber Treiber erreicht wird (KC85)
   14                  A
   15         0000     AIF KC85	; KC-spezifische Einstellungen:
   27                  AELSE 	; Einstellungen fuer nicht-KC-Systeme (Angaben entsprechen Z1013):
   28                  A
   29         0000     ABRKT	EQU	0	; Tastaturabfrage bei GET (Abbruch mit Break/ESC) ?
   30                  A			; 0 = keine Tastaturabfrage
   31                  A			; 1 = kann bei aufwaendigen BIOS-Routinen Uebertragung
   32                  A			; sehr stark bremsen!
   33                  A
   34                  A; Portadressen definieren:
   35         00DC     APIOA	EQU	0DCh	; Daten A (Datenport, bidirektional)
   36         00DD     APIOB	EQU	0DDh	; Daten B (Steuersignale, Bitbetrieb)
   37         00DE     APIOAS	EQU	0DEh	; Steuer A
   38         00DF     APIOBS	EQU	0DFh	; Steuer B
   39         0040     ABS	EQU	64	; Bildschirmbreite in Zeichen (64 oder 80 moeglich!)
   40         0002     AFREQ	EQU	2	; CPU-Taktfrequenz in MHz
   41                  A
   42                  AENDIF ;KC85
   43                  A
   44                  A; CP/M-Vereinbarungen:
   45                  A
   46         000A     ALF	EQU	0AH
   47         000D     ACR	EQU	0DH
   48         001A     AEOF	EQU	1AH
   49         001B     AESC	EQU	1BH
   50         0005     ABDOS	EQU	5
   51         000C     A_GETVER	EQU	12	; CP/M-Version testen
   52         000E     A_SELDSK	EQU	14	; Laufwerk waehlen
   53         0011     A_FIRST	EQU	17	; ersten Verzeichniseintrag suchen
   54         0012     A_NEXT	EQU	18	; naechsten Verzeichniseintrag suchen
   55         0020     A_SETUSR	EQU	32	; USER waehlen
   56         0023     A_CALC	EQU	35	; Dateigroesse berechnen
   57         0030     A_DOSVER	EQU	48	; erweiterte DOS-Version holen
   58         0062     A_GETCLK	EQU	98	; Uhrzeit holen
   59         0066     A_GETDAT	EQU	102	; Datumstempel lesen
   60         0067     A_SETDAT	EQU	103	; Datumstempel schreiben
   61         005C     AFCB1	EQU	5CH	; erster FCB
   62         006C     AFCB2	EQU	6CH	; zweiter FCB
   63         0080     ADEFDMA	EQU	80H	; Standard-DMA-Puffer
   64                  A
   65                  A; Vinculum-Kommandos:
   66                  A
   67         0001     ADIR	EQU	01H	; List file(s)
   68         0007     ADLF	EQU	07H	; Delete File
   69         0008     AWRF	EQU	08H	; Write to File
   70         0009     AOPW	EQU	09H	; Open/write
   71         000A     ACLF	EQU	0AH	; Close
   72         000B     ARDF	EQU	0BH	; Read from File
   73         000E     AOPR	EQU	0EH	; Open/read
   74         0010     ASCS	EQU	10H	; Short CMD
   75         0011     AECS	EQU	11H	; Extend. CMD
   76         002F     ADIRT	EQU	2FH	; List File Date&Time
   77         0091     AIPH	EQU	91H	; Binaer-Modus einstellen
   78                  A
   79                  A; Verwendung fertiger Routinen:
   80                  A
   81                  AEXT	$MEMRY		; Endadresse von Linker
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   3
USBINC  Z80

   82                  A
   83                  A	.request	DSLIBS
   84                  AEXT	M2UTIM		; DOS-Datum zu ZSDOS konvertieren
   85                  AEXT	U2MTIM		; ZSDOS-Datum zu DOS konvertieren
   86                  A
   87                  A	.request	SYSLIBS
   88                  AEXT	INITFCB		; FCB initialisieren
   89                  AEXT	SETDMA		; DMA-Adresse einstellen
   90                  AEXT	F$OPEN		; Datei oeffnen
   91                  AEXT	F$DELETE	; Datei loeschen
   92                  AEXT	F$MAKE		; Datei erzeugen
   93                  AEXT	F$WRITE		; Sektor in Datei schreiben
   94                  AEXT	F$READ		; Sektor aus Datei lesen
   95                  AEXT	F$CLOSE		; Datei schliessen
   96                  AEXT	PFN2		; Dateiname anzeigen
   97                  AEXT	COUT		; Zeichenausgabe zu CON:
   98                  AEXT	POUT		; Zeichenausgabe zu PUN:
   99                  AEXT	RIN		; Zeicheneingabe von RDR:
  100                  AEXT	EPRINT		; Zeichenkette anzeigen
  101                  AEXT	CAPIN		; Tastaturabfrage mit UPCASE
  102                  AEXT	CONDIN		; Tastaturabfrage
  103                  AEXT	PUTUD		; aktuelles DU: sichern
  104                  AEXT	GETUD		; gemerktes DU: regenerieren
  105                  AEXT	PA2HC		; A als 2stellige HEX/BCD-Zahl anzeigen
  106                  AEXT	PHLFDC		; HL als 1-5stellige Dezimalzahl anzeigen
  107                  AEXT	PHLDC		; HL als Dezimalzahl mit Leerzeichen anzeigen
  108                  A
  109                  A; ---------------------------------------------------------
  110                  A
  111                  A; Optionen aus 2. Parameter ermitteln und abspeichern:
  112                  A
  113                  Asetopt	macro
  114                  A; Verwendung der Optionsbits in allen Programmen gleich, aber nicht alle genutzt:
  115                  A;
  116                  A;	DB	00000010b	; Optionen (Voreinstellung):
  117                  A; V	Bit 0	       ^--------- Anzeige der noch vorhandenen Daten bei Start
  118                  A; S	Bit 1	      ^---------- Verzeichnis sortieren?
  119                  A; O	Bit 2	     ^----------- vorhandene Datei ueberschreiben?
  120                  A; I	Bit 3	    ^------------ vorhandene Datei ignorieren?
  121                  A; U	Bit 3+2     ^^----------- vorhandene Datei aktualisieren?
  122                  A; T/B	Bit 4	   ^------------- Textdatei?
  123                  A; W	Bit 5	  ^-------------- Ausfuehrliche Verzeichnisanzeige
  124                  A; P	Bit 6	 ^--------------- noch frei (evtl. Druckprotokoll?)
  125                  A; M	Bit 7	^---------------- Fortschrittsanzeige (0=% 1=#)
  126                  A
  127                  A	ld	hl,option	; Options-Flags
  128                  A	ld	de,fcb2+1	; Optionen in FCB2 testen
  129                  A	ld	b,11
  130                  A	ld	a,(de)
  131                  A	cp	'/'		; Einleitung fuer Optionen?
  132                  A	jr	z,opt7
  133                  Agetopt:	ld	a,(de)		; Optionen testen
  134                  A	cp	'/'
  135                  A	jp	z,help		; // ist Hilfe
  136                  A	cp	'O'		; ungefragt ueberschreiben?
  137                  A	jr	nz,opt1
  138                  A	set	2,(hl)
  139                  A	res	3,(hl)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   4
USBINC  Z80

  140                  Aopt1:	cp	'T'		; Textdatei?
  141                  A	jr	nz,opt2
  142                  A	set	4,(hl)
  143                  Aopt2:	cp	'B'		; Binaerdatei?
  144                  A	jr	nz,opt3
  145                  A	res	4,(hl)
  146                  Aopt3:	cp	'V'		; alte Daten anzeigen?
  147                  A	jr	nz,opt4
  148                  A	set	0,(hl)
  149                  Aopt4:	cp	'S'		; Liste sortieren?
  150                  A	jr	nz,opt5
  151                  A	set	1,(hl)
  152                  Aopt5:	cp	'I'		; vorhandene Datei ignorieren?
  153                  A	jr	nz,opt6
  154                  A	res	2,(hl)
  155                  A	set	3,(hl)
  156                  Aopt6:	cp	'W'		; ausfuehrliche Anzeige?
  157                  A	jr	nz,opt7
  158                  A	set	5,(hl)
  159                  Aopt7:	cp	'M'		; Fortschrittsanzeige wie MTOOLs?
  160                  A	jr	nz,opt8
  161                  A	set	7,(hl)
  162                  Aopt8:	cp	'U'		; vorhandene Dateien aktualisieren?
  163                  A	jr	nz,opt9
  164                  A	set	2,(hl)
  165                  A	set	3,(hl)
  166                  Aopt9:	inc	de
  167                  A	djnz	getopt
  168                  A	endm
  169                  A
  170                  A; Synchronisieren mit Vinculum:
  171                  A;
  172                  A; PA:	CY=1	Break, TimeOut oder Error
  173                  A; VR:	AF,HL,BC
  174                  A
  175 0086'            Asynchr:
  176         0000     AIF KC85				; CPU-Taktfrequenz von D008 ermitteln!
  211                  AELSE ;KC85
  212                  A
  213                  A; PIO Port B initialisieren:
  214 0086' 3E CF      A	ld	a,0CFH		; Bitbetrieb
  215 0088' D3 DF      A	out	(piobs),a
  216 008A' 3E 33      A	ld	a,00110011b	; I/O festlegen
  217 008C' D3 DF      A	out	(piobs),a
  218 008E' 3E 07      A	ld	a,07H		; DI, Maske folgt nicht
  219 0090' D3 DF      A	out	(piobs),a
  220                  A;	ld	a,0FFH		; kein Bit aktiv
  221                  A;	out	(piobs),a
  222 0092' 3E C4      A	ld	a,0C4H		; #PROG=1, #RESET=1, RD&WR inaktiv
  223 0094' D3 DD      A	out	(piob),a
  224                  A
  225                  A; PIO Port A initialisieren:
  226 0096' 3E 8F      A	ld	a,8FH		; bidirektional
  227 0098' D3 DE      A	out	(pioas),a
  228 009A' 3E 07      A	ld	a,07H		; kein INT
  229 009C' D3 DE      A	out	(pioas),a
  230 009E' DB DC      A	in	a,(pioa)	; Dummy-Eingabe
  231                  A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   5
USBINC  Z80

  232                  AENDIF ;KC85
  233                  A
  234                  A; dreistufiges Synchronisieren:
  235                  A
  236 00A0' 3A 0017'   Async:	LD	A,(TAKT)	; CPU-Taktfrequenz in MHz
  237 00A3' 47         A	LD	B,A
  238 00A4' 21 0000    A	LD	hl,0		; Startwert fuer Multiplikation
  239         0000     AIF KC85
  241                  AELSE
  242 00A7' 11 0258    A	ld	de,600		; Faktor fuer Zeitschleife bei CP/M-Version
  243                  AENDIF
  244 00AA' 19         AT3:	add	hl,de		; aufsummieren
  245 00AB' 10 FD      A	djnz	T3
  246 00AD' 54         A	ld	d,h
  247 00AE' 5D         A	ld	e,l		; DE = Zaehlerwert fuer Zeitschleife
  248 00AF' CD 0000#   Asyn0:	call	condin		; Tastatureingabe vorhanden?
  249 00B2' 28 ??      A	jr	z,syn1		; nein
  250 00B4' FE 03      A	cp	3		; Break?
  251 00B6' CA 0000    A	jp	z,0
  252 00B9' FE 1B      A	cp	esc		; ESC?
  253 00BB' CA 0000    A	jp	z,0
  254 00BE'            Asyn1:
  255         0000     AIF KC85
  258                  AELSE
  259 00BE' DB DD      A	in	a,(PIOB)	; Status abfragen
  260                  AENDIF
  261 00C0' 0F         A	rrca
  262 00C1' 38 ??      A	jr	c,syn2		; keine Daten vorhanden
  263 00C3' CD 0000#   A	call	get		; vorhandene Daten abholen
  264 00C6' 21 0016'   A	ld	hl,option
  265 00C9' CB 46      A	bit	0,(hl)
  266 00CB' C4 0000#   A	call	nz,crtx		; und anzeigen, wenn konfiguriert
  267 00CE' 18 D0      A	jr	sync
  268                  A	;
  269 00D0' 0F         Asyn2:	rrca	
  270 00D1' 38 CD      A	jr	c,sync		; noch nicht bereit, Daten zu schreiben
  271 00D3' 10 FE      A	djnz	$		; kurze Zeit warten
  272 00D5' 1B         A	dec	de
  273 00D6' 7A         A	ld	a,d		; Zaehler abwarten
  274 00D7' B3         A	or	e
  275 00D8' 20 D5      A	jr	nz,syn0		; nochmals nachschauen...
  276         0000     AIF KC85
  279                  AELSE
  280 00DA' DB DD      A	in	a,(PIOB)	; Status abfragen
  281                  AENDIF
  282 00DC' E6 03      A	and	3		; nur Bit 0 und 1 auswerten
  283 00DE' FE 01      A	cp	1		; alle Daten abgeholt und bereit zum schreiben?
  284 00E0' 20 BE      A	jr	nz,sync		; nein !
  285                  A
  286 00E2' 3E 0D      A	ld	a,cr
  287 00E4' CD 0000#   A	call	put		; <cr> muss irgendwie <cr> zurueckgeben
  288 00E7' CD 0000#   Asyn3:	call	get
  289 00EA' D8         A	ret	c		; BRK oder TimeOut
  290 00EB' FE 0D      A	cp	cr
  291 00ED' 20 F8      A	jr	nz,syn3
  292                  A
  293 00EF' 3E 45      A	ld	a,'E'		; E <cr> muss E <cr> zurueckgeben
  294 00F1' CD 0000#   A	call	put
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   6
USBINC  Z80

  295 00F4' 3E 0D      A	ld	a,cr
  296 00F6' CD 0000#   A	call	put
  297 00F9' CD 0000#   Asyn4:	call	get		; Daten holen
  298 00FC' D8         A	ret	c		; BRK oder TimeOut
  299 00FD' FE 45      A	cp	'E'
  300 00FF' 20 F8      A	jr	nz,syn4
  301 0101' CD 0000#   A	call	get
  302 0104' D8         A	ret	c		; BRK oder TimeOut
  303 0105' FE 0D      A	cp	cr
  304 0107' 20 F0      A	jr	nz,syn4
  305                  A
  306 0109' 3E 65      A	ld	a,'e'		; e <cr> muss e <cr> zurueckgeben
  307 010B' CD 0000#   A	call	put
  308 010E' 3E 0D      A	ld	a,cr
  309 0110' CD 0000#   A	call	put
  310 0113' CD 0000#   Asyn5:	call	get		; Daten abholen
  311 0116' D8         A	ret	c		; BRK oder TimeOut
  312 0117' FE 65      A	cp	'e'
  313 0119' 20 F8      A	jr	nz,syn5
  314 011B' CD 0000#   A	call	get
  315 011E' D8         A	ret	c		; BRK oder TimeOut
  316 011F' FE 0D      A	cp	cr
  317 0121' 20 F0      A	jr	nz,syn5
  318 0123' C9         A	ret
  319                  A
  320         0000     AIF KC85
  378                  AELSE ;KC85
  379                  A
  380                  A; Eingabe von VDIP1 abholen (mit Break und TimeOut):
  381                  A; PA:	A	Datenbyte
  382                  A;	CY=1	TimeOut oder Break
  383                  A; VR:	AF
  384                  A
  385 0124' C5         AGET:	push	bc
  386 0125' 01 0000    A	ld	bc,0		; Zeitkonstante
  387 0128'            Aget4:
  388         0000     AIF BRKT
  396                  AENDIF
  397 0128' DB DD      A	in	a,(PIOB)	; Status abfragen
  398 012A' 0F         A	rrca			; Daten vorhanden?
  399 012B' 30 ??      A	jr	nc,get3		; ja, abholen
  400 012D' 03         A	inc	bc
  401 012E' 78         A	ld	a,b
  402 012F' B1         A	or	c		; TimeOut?
  403 0130' 20 F6      A	jr	nz,get4
  404 0132' CD 0000#   Aget2:	call	eprint
  405 0135' 54 69 6D 65A	db	'TimeOut Error',0
  406         0000     AIF BRKT
  412                  AENDIF
  413 0143' C1         A	pop	bc
  414 0144' 37         A	scf			; Fehler
  415 0145' C9         A	ret
  416                  A	;
  417 0146' 3E C0      Aget3:	LD	A,0C0H		; RD# aktiv
  418 0148' D3 DD      A	OUT	(PIOB),A
  419 014A' DB DC      A	IN	A,(PIOA)	; Daten holen
  420 014C' 4F         A	LD	C,A
  421 014D' 3E C4      A	LD	A,0C4H		; RD# inaktiv
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   7
USBINC  Z80

  422 014F' D3 DD      A	OUT	(PIOB),A
  423 0151' 79         A	LD	A,C
  424 0152' C1         A	pop	bc
  425 0153' B7         A	or	a		; CY=0 (OK)
  426 0154' C9         A	ret
  427                  A
  428                  A; Ausgabe zu VDIP1 senden:
  429                  A; PE:	A	Datenbyte
  430                  A; VR:	-
  431                  A
  432 0155' D3 DC      APUT:	OUT	(PIOA),A	; Daten
  433 0157' F5         A	push	af
  434 0158' DB DD      Aput1:	IN	A,(PIOB)	; Status abfragen
  435 015A' 0F         A	RRCA
  436 015B' 0F         A	RRCA
  437 015C' 38 FA      A	JR	C,put1		; nicht bereit, warten!
  438 015E' 3E CC      A	LD	A,0CCH
  439 0160' D3 DD      A	OUT	(PIOB),A	; WR aktiv
  440 0162' 3E C4      A	LD	A,0C4H
  441 0164' D3 DD      A	OUT	(PIOB),A	; WR inaktiv
  442 0166' F1         A	pop	af
  443 0167' C9         A	RET
  444                  AENDIF ;KC85
  445                  A
  446                  A; Kommando, gefolgt von Dateiname (fcb1) ausloesen:
  447                  A;
  448                  A; PE:	A	Kommando
  449                  A; PA:	CY=1	Fehler
  450                  A
  451 0168' CD 0155'   AOUTNAM:	CALL	PUT		; Kommando
  452 016B' 3E 20      A	LD	A,' '
  453 016D' CD 0155'   A	CALL	PUT
  454 0170' 21 005D    A	LD	HL,fcb1+1	; Dateiname
  455 0173' 06 0B      A	LD	B,11		; Laenge 8+3
  456 0175' 7E         AOPEN:	LD	A,(HL)
  457 0176' E5         A	push	hl
  458 0177' E6 7F      A	and	7fh		; Bit 7 ruecksetzen
  459 0179' 21 0000#   A	ld	hl,errchr
  460 017C' 0E 05      A	ld	c,5		; 5 verbotene Zeichen testen
  461 017E' BE         Aop1:	cp	(hl)
  462 017F' 20 ??      A	jr	nz,op2
  463 0181' 3E 5F      A	ld	a,'_'		; -> konvertieren
  464 0183' 23         Aop2:	inc	hl
  465 0184' 0D         A	dec	c
  466 0185' 20 F7      A	jr	nz,op1
  467 0187' E1         A	pop	hl
  468 0188' 23         A	INC	HL
  469 0189' FE 21      A	CP	21H		; Leerzeichen oder Steuerzeichen?
  470 018B' D4 0155'   A	CALL	nc,PUT		; Dateiname
  471 018E' 78         A	ld	a,b
  472 018F' FE 04      A	cp	4
  473 0191' 3E 2E      A	ld	a,'.'		; Trennzeichen vor Dateityp
  474 0193' CC 0155'   A	call	z,PUT
  475 0196' 10 DD      A	DJNZ	OPEN
  476 0198' C9         A	ret
  477                  A	;
  478 0199' 5C 2F 22 7CAERRCHR:	DB	'\/"|+'		; Zeichen die unter DOS verboten sind
  479                  A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   8
USBINC  Z80

  480                  A; Vinculum-Kommando ausfuehren:
  481                  A;
  482                  A;PA:	CY=1	Fehler (VDIP1-Fehler oder BRK oder TimeOut)
  483                  A;VR:	AF
  484                  A
  485 019E' 3E 0D      AEXEC:	LD	A,CR	; Kommandoabschluss
  486 01A0' CD 0155'   A	CALL	PUT
  487 01A3' CD 0124'   Aex1:	CALL	GET	; Ergebnis holen
  488 01A6' D8         A	RET	C	; BRK oder TimeOut!
  489 01A7' FE 3E      A	CP	'>'
  490 01A9' 20 ??      A	JR	NZ,ERR
  491 01AB' CD 0124'   A	CALL	GET
  492 01AE' D8         A	RET	C
  493 01AF' FE 0D      A	CP	CR	; OK, fertig?
  494 01B1' C8         A	RET	Z
  495 01B2' CD 0000#   AERR:	CALL	CRTX	; Errorcode anzeigen
  496 01B5' CD 0124'   A	CALL	GET
  497 01B8' 38 ??      A	JR	C,EX3
  498 01BA' FE 0D      A	CP	CR	; Ende?
  499 01BC' 20 F4      A	JR	NZ,ERR
  500 01BE' CD 0000#   Aex3:	CALL	eprint
  501 01C1' 2D 45 72 72A	db	'-Error',0
  502 01C8' 37         A	SCF		; Fehler!
  503 01C9' C9         A	RET
  504                  A
  505                  A; spezielle CRT-Routine:
  506                  A;
  507                  A; PE:	A	Zeichencode
  508                  A; VR:	-
  509                  A
  510 01CA' F5         ACRTX:	push	af
  511 01CB' E6 7F      A	and	7fh		; Bit 7 abschneiden
  512 01CD' FE 20      A	cp	20h
  513 01CF' 30 ??      A	jr	nc,crt1		; darstellbares Zeichen!
  514 01D1' FE 0D      A	cp	cr
  515 01D3' 20 ??      A	jr	nz,crt2		; nur CR zulaessig
  516 01D5' CD 0000#   A	call	cout
  517 01D8' 3E 0A      A	ld	a,lf		; mit LF ergaenzen
  518 01DA' CD 0000#   Acrt1:	call	cout
  519 01DD' F1         Acrt2:	pop	af
  520 01DE' C9         A	ret
  521                  A
  522                  A; Anzeige UTools-Programmversion:
  523                  A
  524 01DF'            Aversion:
  525 01DF' CD 0000#   A	call	eprint
  526 01E2' 20 55 54 6FA	db	' UTools v',0
  527 01EC' 3A 0015'   A	ld	a,(vers)	; Versionsnummer BCD
  528 01EF' CD 0000#   A	call	verbcd
  529 01F2' CD 0000#   A	call	eprint
  530         0000     AIF KC85
  532                  AELSE ;KC85
  533 01F5' 20 43 50 2FA	DB	' CP/M '
  534                  AENDIF ;KC85
  535 01FB' 20 20 28 63A	db	'  (c) 2008-2014, M. Leubner',cr,lf,0
  536 0219' C9         A	ret
  537                  A;
  538                  A; Versionsnummer x.y anzeigen
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   9
USBINC  Z80

  539                  A; PE:	A	BCD-Wert
  540                  A; VR:	-
  541                  A;
  542 021A' F5         AVERBCD:	push	af
  543 021B' 1F         A	rra
  544 021C' 1F         A	rra
  545 021D' 1F         A	rra
  546 021E' 1F         A	rra
  547 021F' CD 0000#   A	call	ahex0		; hoeherwertigen Teil
  548 0222' 3E 2E      A	ld	a,'.'		; Trennzeichen
  549 0224' CD 0000#   A	call	cout
  550 0227' F1         A	pop	af		; niederwertigen Teil
  551 0228' F5         AAHEX0:	PUSH	AF
  552 0229' E6 0F      A	AND	0FH
  553 022B' C6 90      A	ADD	A,90H
  554 022D' 27         A	DAA
  555 022E' CE 40      A	ADC	A,40H
  556 0230' 27         A	DAA
  557 0231' CD 0000#   A	CALL	cout
  558 0234' F1         A	POP	AF
  559 0235' C9         A	RET
  560                  A
  561                  A;
  562                  A; Treiberumleitung deaktivieren (vor EXIT):
  563                  A; V1.4: vorher noch alle anliegenden Daten abholen
  564                  A;
  565         0000     AIF KC85
  599                  AELSE	; noch vorhandene Daten abholen wenn kein KC85:
  600 0236' DB DD      Adeinit:	in	a,(PIOB)	; Status abfragen
  601 0238' 0F         A	rrca
  602 0239' 38 ??      A	jr	c,deini2	; keine Daten vorhanden
  603 023B' CD 0124'   A	call	get		; vorhandene Daten abholen
  604 023E' 18 F6      A	jr	deinit
  605 0240' 10 FE      Adeini2:	djnz	$		; kurze Zeit warten
  606 0242' DB DD      A	in	a,(PIOB)	; Status-Kontrolle
  607 0244' E6 03      A	and	3		; nur Bit 0 und 1 auswerten
  608 0246' FE 01      A	cp	1		; alle Daten abgeholt und bereit zum schreiben?
  609 0248' 20 EC      A	jr	nz,deinit	; nein !
  610                  Aendif ;KC85
  611 024A' C9         A	ret
  612                  A
  613                  APROZENT	macro
  614                  A; Fortschrittsanzeige in Prozent der Dateigroesse berechnen und anzeigen
  615                  A;
  616                  A; PE:	(filesize0)	Gesamtgroesse
  617                  A;	(filesize)	Laufvariable (Rueckwartszaehler)
  618                  A;
  619                  A; VR:	alle
  620                  A
  621                  APROZ:	ld	a,(option)	; Fortschritt wie anzeigen?
  622                  A	rlca
  623                  A	jr	nc,PROZ0	; Fortschrittsanzeige in Prozent
  624                  A	ld	a,'#'
  625                  A	jp	cout		; Zeichen anzeigen fuer einen Datenblock
  626                  A	;
  627                  APROZ0:	LD	IX,FILESIZE0	; Gesamtdateigroesse
  628                  A	ld	de,(filesize)
  629                  A	ld	bc,(filesize+2)	; BCDE = restliche Anzahl
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  10
USBINC  Z80

  630                  A	ld	a,(ix)
  631                  A	sub	e
  632                  A	ld	e,a
  633                  A	ld	a,(ix+1)
  634                  A	sbc	a,d
  635                  A	ld	d,a
  636                  A	ld	a,(ix+2)
  637                  A	sbc	a,c
  638                  A	ld	c,a
  639                  A	ld	a,(ix+3)
  640                  A	sbc	a,b
  641                  A	ld	b,a		; BCDE = abgearbeitete Groesse
  642                  A	ld	a,cr
  643                  A	call	cout		; Cursor an Zeilenanfang setzen
  644                  A	LD	A,(IX)
  645                  A	OR	(IX+1)
  646                  A	OR	(IX+2)
  647                  A	OR	(IX+3)
  648                  A	JR	Z,PROZ1		; Dateigroesse = 0 -> 100,0%
  649                  A	xor	a
  650                  A	ex	af,af'		; fuehrende Nullen ausblenden
  651                  A	call	ZIFFER		; Hunderter anzeigen
  652                  A	call	mul10		; BCDE * 10
  653                  A	call	ZIFFER		; Zehner anzeigen
  654                  A	call	mul10		; BCDE * 100
  655                  A	ld	a,'0'
  656                  A	ex	af,af'
  657                  A	call	ZIFFER		; Einer anzeigen
  658                  A	ld	a,','
  659                  A	call	cout		; Trennzeichen
  660                  A	call	mul10		; BCDE * 1000
  661                  A	call	ZIFFER		; Zehntel anzeigen
  662                  A	ld	a,'%'
  663                  A	jp	cout
  664                  APROZ1:	call	eprint
  665                  A	db	'100,0%',0
  666                  A	ret
  667                  A
  668                  A; 32-Bit-Zahl in BCDE mit 10 multiplizieren
  669                  A;
  670                  A; PE:	BCDE	32-Bit-Zahl
  671                  A; PA:	BCDE	Ergebnis
  672                  A;
  673                  Amul10:	SLA	E
  674                  A	RL	D
  675                  A	RL	C
  676                  A	RL	B	; *2
  677                  A	push	bc
  678                  A	push	de
  679                  A	SLA	E
  680                  A	RL	D
  681                  A	RL	C
  682                  A	RL	B	; *4
  683                  A	SLA	E
  684                  A	RL	D
  685                  A	RL	C
  686                  A	RL	B	; *8
  687                  A	POP	HL
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  11
USBINC  Z80

  688                  A	ADD	HL,DE
  689                  A	EX	DE,HL
  690                  A	POP	HL
  691                  A	ADC	HL,BC
  692                  A	LD	B,H
  693                  A	LD	C,L	; BCDE*10 (8+2)
  694                  A	ret
  695                  A
  696                  A; Verhaeltnis zweier 32-Bit-Zahlen BCD berechnen und anzeigen
  697                  A; (eine Stelle fuer Prozentanzeige)
  698                  A;
  699                  A; PE:	BCDE	32-Bit-Ziffer
  700                  A;	IX	Wertigkeit (Gesamtdateigroesse)
  701                  A;	A'	'0' wenn Ausgabe laeuft
  702                  A; PA:	BCDE	Rest, der bei der Teilung uebrig bleibt
  703                  A
  704                  AZIFFER:	LD	L,99H		; Zaehler
  705                  AZIFF1:	LD	A,L
  706                  A	ADD	A,1		; HL = HL+1 (BCD)
  707                  A	DAA
  708                  A	LD	L,A
  709                  A
  710                  A	LD	A,E
  711                  A	SUB	(IX)		; E = niederwertigstes Byte
  712                  A	LD	E,A
  713                  A	LD	A,D
  714                  A	SBC	A,(IX+1)	; D = mittleres Byte
  715                  A	LD	D,A
  716                  A	LD	A,C
  717                  A	SBC	A,(IX+2)	; C = hoeherwertiges Byte
  718                  A	LD	C,A
  719                  A	LD	A,B
  720                  A	SBC	A,(IX+3)	; B = hoechstwertiges Byte
  721                  A	LD	B,A
  722                  A	JR	NC,ZIFF1	; nochmal enthalten
  723                  A
  724                  A	LD	A,E
  725                  A	ADD	A,(IX)		; letzten Teil wieder addieren
  726                  A	LD	E,A
  727                  A	LD	A,D
  728                  A	ADC	A,(IX+1)
  729                  A	LD	D,A
  730                  A	LD	A,C
  731                  A	ADC	A,(IX+2)
  732                  A	LD	C,A
  733                  A	LD	A,B
  734                  A	ADC	A,(IX+3)
  735                  A	LD	B,A
  736                  A
  737                  A	LD	A,L
  738                  A	AND	0FH		; Zahler = null?
  739                  A	JR	NZ,ZIFF2	; nein, sofort anzeigen
  740                  A	EX	AF,AF'
  741                  A	PUSH	AF
  742                  A	EX	AF,AF'
  743                  A	POP	AF
  744                  A	OR	A		; laeuft Ausgabe schon?
  745                  A	RET	Z		; nein, keine fuehrende Nullen!
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  12
USBINC  Z80

  746                  AZIFF2:	EX	AF,AF'
  747                  A	LD	A,'0'		; Ausgabe laeuft
  748                  A	EX	AF,AF'
  749                  A	OR	'0'		; Ziffer
  750                  A	JP	COUT		; anzeigen
  751                  A	endm
  752                  A
  753                  A;	end of include
   47                   
   48                   ;-----------------------------------------------------
   49                   
   50 024B' CD 01DF'    HELP:	call	version		; Programmversion
   51 024E' CD 0000#    	call	eprint
   52 0251' 0D 0A       	db	cr,lf
   53 0253' 20 55 44 49 	db	' UDIR.COM listet das aktuelle Verzeichnis des USB-Stick.',cr,lf
   54 028D' 0D 0A       	db	cr,lf
   55 028F' 20 4B 6F 6D 	db	' Kommandoformen:',cr,lf
   56 02A1' 20 20 20 55 	db	'   UDIR /opt         - vollstaendiges Verzeichnis',cr,lf
   57 02D4' 20 20 20 55 	db	'   UDIR <maske> /opt - nur Dateien anzeigen, die der Maske entsprechen',cr,lf
   58 031C' 0D 0A       	db	cr,lf
   59 031E' 20 4F 70 74 	db	' Optionen:',cr,lf
   60 032A' 20 20 20 2F 	db	'   / - Anzeige der Hilfeseite',cr,lf,0
   61 034A' 21 0016'    	ld	hl,option
   62 034D' CB 46       	bit	0,(hl)
   63 034F' 20 ??       	jr	nz,h0
   64 0351' CD 0000#    	call	eprint
   65 0354' 20 20 20 56 	db	'   V - vorher anliegenden Meldungen anzeigen',cr,lf,0
   66 0383'             h0:
   67                   ;	db	'   B - Binaerdatei, alle Zeichen uebertragen',cr,lf
   68                   ;	db	'   T - Textdatei, Abbruch bei 1AH (^Z)',cr,lf
   69                   ;	db	'   I - vorhandene Dateien ungefragt ignorieren',cr,lf
   70                   ;	db	'   O - vorhandene Dateien ungefragt ersetzen',cr,lf
   71                   
   72 0383' CB 4E       	bit	1,(hl)
   73 0385' 20 ??       	jr	nz,h1
   74 0387' CD 0000#    	call	eprint
   75 038A' 20 20 20 53 	db	'   S - sortiere Dateiliste',cr,lf,0
   76 03A7'             h1:
   77 03A7' CB 6E       	bit	5,(hl)
   78 03A9' 20 ??       	jr	nz,h5
   79 03AB' CD 0000#    	call	eprint
   80 03AE' 20 20 20 57 	db	'   W - ausfuehrliche Informationen anzeigen',cr,lf,0
   81 03DC'             h5:
   82 03DC' C7          	rst	0		; Abbruch
   83                   
   84                   ; Programmstart:
   85                   
   86 03DD' 2A 0006     START:	LD	HL,(BDOS+1)
   87 03E0' 2E 00       	LD	L,0
   88 03E2' F9          	LD	SP,HL		; Stack unterhalb BDOS legen
   89 03E3' 25          	dec	h
   90 03E4' 22 0000#    	ld	(tpaend),hl	; Obergzenze fuer Verzeichnispuffer
   91 03E7' 3A 005D     	ld	a,(FCB1+1)	; 1. Parameter testen
   92 03EA' FE 2F       	cp	'/'		; Optionen bereits hier?
   93 03EC' 20 ??       	jr	nz,par2		; nein, Dateimaske
   94 03EE' 11 006D     	ld	de,fcb2+1
   95 03F1' 21 005D     	ld	hl,fcb1+1
   96 03F4' 06 0B       	ld	b,11
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  13
UDIR    Z80

   97 03F6' 7E          par1:	ld	a,(hl)		; Optionen von FCB1 in FCB2 verschieben
   98 03F7' 12          	ld	(de),a
   99 03F8' 3E 3F       	ld	a,'?'
  100 03FA' 77          	ld	(hl),a		; FCB1 leeren (*.*)
  101 03FB' 23          	inc	hl
  102 03FC' 13          	inc	de
  103 03FD' 10 F7       	djnz	par1
  104 03FF'             par2:	setopt			; Optionen setzen
   14 03FF' 21 0016'   A	ld	hl,option	; Options-Flags
   15 0402' 11 006D    A	ld	de,fcb2+1	; Optionen in FCB2 testen
   16 0405' 06 0B      A	ld	b,11
   17 0407' 1A         A	ld	a,(de)
   18 0408' FE 2F      A	cp	'/'		; Einleitung fuer Optionen?
   19 040A' 28 ??      A	jr	z,opt7
   20 040C' 1A         Agetopt:	ld	a,(de)		; Optionen testen
   21 040D' FE 2F      A	cp	'/'
   22 040F' CA 024B'   A	jp	z,help		; // ist Hilfe
   23 0412' FE 4F      A	cp	'O'		; ungefragt ueberschreiben?
   24 0414' 20 ??      A	jr	nz,opt1
   25 0416' CB D6      A	set	2,(hl)
   26 0418' CB 9E      A	res	3,(hl)
   27 041A' FE 54      Aopt1:	cp	'T'		; Textdatei?
   28 041C' 20 ??      A	jr	nz,opt2
   29 041E' CB E6      A	set	4,(hl)
   30 0420' FE 42      Aopt2:	cp	'B'		; Binaerdatei?
   31 0422' 20 ??      A	jr	nz,opt3
   32 0424' CB A6      A	res	4,(hl)
   33 0426' FE 56      Aopt3:	cp	'V'		; alte Daten anzeigen?
   34 0428' 20 ??      A	jr	nz,opt4
   35 042A' CB C6      A	set	0,(hl)
   36 042C' FE 53      Aopt4:	cp	'S'		; Liste sortieren?
   37 042E' 20 ??      A	jr	nz,opt5
   38 0430' CB CE      A	set	1,(hl)
   39 0432' FE 49      Aopt5:	cp	'I'		; vorhandene Datei ignorieren?
   40 0434' 20 ??      A	jr	nz,opt6
   41 0436' CB 96      A	res	2,(hl)
   42 0438' CB DE      A	set	3,(hl)
   43 043A' FE 57      Aopt6:	cp	'W'		; ausfuehrliche Anzeige?
   44 043C' 20 ??      A	jr	nz,opt7
   45 043E' CB EE      A	set	5,(hl)
   46 0440' FE 4D      Aopt7:	cp	'M'		; Fortschrittsanzeige wie MTOOLs?
   47 0442' 20 ??      A	jr	nz,opt8
   48 0444' CB FE      A	set	7,(hl)
   49 0446' FE 55      Aopt8:	cp	'U'		; vorhandene Dateien aktualisieren?
   50 0448' 20 ??      A	jr	nz,opt9
   51 044A' CB D6      A	set	2,(hl)
   52 044C' CB DE      A	set	3,(hl)
   53 044E' 13         Aopt9:	inc	de
   54 044F' 10 BB      A	djnz	getopt
  105 0451' CD 0086'    	call	synchr		; Synchronisation
  106 0454' DA 0000#    	jp	c,exit
  107                   
  108                   ; Test, ob USB-Stick angeschlossen ist:
  109                   
  110 0457' 3E 10       	LD	A,SCS		; Short CMD-Modus
  111 0459' CD 0155'    	CALL	PUT
  112 045C' CD 019E'    	CALL	EXEC
  113 045F' DA 0000#    	jp	c,exit		; Error
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  14
UDIR    Z80

  114                   
  115 0462' 3E 91       	LD	A,IPH		; HEX- bzw. BIN-Modus
  116 0464' CD 0155'    	CALL	PUT
  117 0467' CD 019E'    	CALL	EXEC
  118 046A' DA 0000#    	jp	c,exit		; Error
  119                   
  120 046D' CD 019E'    	call	exec		; Flash-Disk vorhanden?
  121 0470' DA 0000#    	jp	c,exit
  122                   
  123                   ; DIR-Kommando ausfuehren:
  124                   
  125 0473' CD 0000#    	call	eprint
  126 0476' 44 69 72 65 	db	'Directory einlesen',0
  127 0489' 3E 01       	ld	a,dir		; DIR
  128 048B' CD 0155'    	call	put
  129 048E' 3E 0D       	ld	a,cr		; ohne Parameter
  130 0490' CD 0155'    	call	put
  131                   
  132 0493' 21 0000#    	ld	hl,$memry	; Directory hier ablegen
  133 0496' 22 0000#    	ld	(pointer),hl	; Zeiger setzen
  134 0499' 21 0000     	ld	hl,0
  135 049C' 22 0000#    	ld	(count),hl
  136 049F' 21 0000#    read:	ld	hl,data		; Datenpuffer fuer eine Zeile
  137 04A2' 06 ??       	ld	b,size		; max. Puffergroesse
  138 04A4' CD 0124'    rd1:	call	get		; Zeichen holen
  139 04A7' DA 0000#    	jp	c,exit		; Fehler
  140 04AA' 77          	ld	(hl),a		; ablegen
  141 04AB' 23          	inc	hl
  142 04AC' FE 0D       	cp	cr
  143 04AE' 28 ??       	jr	z,rd2		; CR erkannt
  144 04B0' 10 F2       	djnz	rd1		; weiter bis Puffer voll ist
  145 04B2' 21 0000#    rd2:	ld	hl,data
  146 04B5' 7E          	ld	a,(hl)
  147 04B6' FE 3E       	cp	'>'
  148 04B8' CA 0000#    	jp	z,disp		; Prompt erkannt -> Anzeige
  149 04BB' FE 0D       	cp	cr
  150 04BD' 28 E0       	jr	z,read		; Leerzeile -> ignorieren
  151                   
  152                   ; Eintrag in Puffer kopieren:
  153                   
  154 04BF' 2A 0000#    	ld	hl,(pointer)	; Verzeichnispuffer
  155 04C2' 11 0000#    	ld	de,data		; Datenpuffer
  156                   ;	ld	a,(de)
  157 04C5' 06 0C       	ld	b,12		; max. Laenge 8.3
  158 04C7' 1A          mov1:	ld	a,(de)
  159 04C8' 4F          	ld	c,a		; Zeichen merken
  160 04C9' FE 0D       	cp	cr		; fertig?
  161 04CB' 20 ??       	jr	nz,mov5
  162 04CD' 78          	ld	a,b
  163 04CE' FE 04       	cp	4		; Position von Trennzeichen?
  164 04D0' 3E 20       	ld	a,' '
  165 04D2' 20 ??       	jr	nz,mov4		; nein, Rest sind ein Leerzeichen
  166 04D4' 3E 2E       	ld	a,'.'
  167 04D6' 18 ??       	jr	mov4		; Dateien ohne Typ mit Punkt ergaenzen!
  168 04D8' 13          mov5:	inc	de
  169 04D9' 79          	ld	a,c
  170 04DA' FE 20       	cp	' '		; Trennzeichen Verzeichnisname/DIR ?
  171 04DC' 28 ??       	jr	z,mov2
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  15
UDIR    Z80

  172 04DE' FE 2E       	cp	'.'		; Trennzeichen Dateiname/Typ?
  173 04E0' 20 ??       	jr	nz,mov4
  174 04E2' 3A 0000#    	ld	a,(data)
  175 04E5' FE 2E       	cp	'.'		; Unterverzeichnis?
  176 04E7' 28 ??       	jr	z,mov3
  177 04E9' 78          mov2:	ld	a,b		; noch Zeichen
  178 04EA' FE 05       	cp	5		; kleiner als 5?
  179 04EC' 38 ??       	jr	c,mov3		; ja, wir sind richtig
  180 04EE' 3E 20       	ld	a,' '
  181 04F0' 77          	ld	(hl),a		; Leerzeichen einfuegen
  182 04F1' 23          	inc	hl		; ansonsten ein Zeichen weiter gehen
  183 04F2' 05          	dec	b		; und mitzaehlen
  184 04F3' 18 F4       	jr	mov2
  185 04F5' 79          mov3:	ld	a,c
  186 04F6' 77          mov4:	ld	(hl),a		; Zeichen ablegen
  187 04F7' 23          	inc	hl
  188 04F8' 10 CD       	djnz	mov1		; wiederholen fuer alle 12 Zeichen
  189                   
  190                   ; Test, ob Eintrag der Maske entspricht:
  191                   
  192 04FA' 2A 0000#    	ld	hl,(pointer)
  193 04FD' 7E          	ld	a,(hl)
  194 04FE' FE 2E       	cp	'.'		; Unterverzeichnis?
  195 0500' 28 ??       	jr	z,copy		; ja, nicht rausfiltern!
  196 0502' 11 005D     	ld	de,fcb1+1
  197 0505' 1A          	ld	a,(de)
  198 0506' FE 20       	cp	' '		; Maske angegeben?
  199 0508' 28 ??       	jr	z,copy		; nein, alles anzeigen!
  200 050A' 06 08       	ld	b,8		; Dateiname pruefen
  201 050C' 1A          cop1:	ld	a,(de)
  202 050D' FE 3F       	cp	'?'		; Wildcard?
  203 050F' 28 ??       	jr	z,cop2
  204 0511' BE          	cp	(hl)
  205 0512' 20 8B       	jr	nz,read		; entspricht nicht der Maske!
  206 0514' 23          cop2:	inc	hl
  207 0515' 13          	inc	de
  208 0516' 10 F4       	djnz	cop1
  209 0518' 23          	inc	hl		; Trennzeichen uebergehen
  210 0519' 06 03       	ld	b,3		; Dateityp pruefen
  211 051B' 1A          cop3:	ld	a,(de)
  212 051C' FE 3F       	cp	'?'		; Wildcard?
  213 051E' 28 ??       	jr	z,cop4
  214 0520' BE          	cp	(hl)
  215 0521' C2 049F'    	jp	nz,read		; entspricht nicht der Maske!
  216 0524' 23          cop4:	inc	hl
  217 0525' 13          	inc	de
  218 0526' 10 F3       	djnz	cop3
  219                   
  220                   ; Eintrag uebernehmen:
  221                   
  222 0528' 2A 0000#    copy:	ld	hl,(pointer)
  223 052B' 01 000C     	ld	bc,12
  224 052E' 09          	add	hl,bc		; Zeiger weitersetzen
  225 052F' 22 0000#    	ld	(pointer),hl	; neuer Zeiger jetzt gueltig
  226 0532' EB          	ex	de,hl
  227 0533' 2A 0000#    	ld	hl,(tpaend)
  228 0536' ED 52       	sbc	hl,de
  229 0538' DA 0000#    	jp	c,err8		; TPA-Ueberlauf!
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  16
UDIR    Z80

  230 053B' 2A 0000#    	ld	hl,(count)
  231 053E' 23          	inc	hl		; Eintraege zaehlen
  232 053F' 22 0000#    	ld	(count),hl
  233 0542' C3 049F'    	jp	read		; naechsten einlesen
  234                   
  235                   ; Anzeige sortiertes Directory:
  236                   
  237 0545' 2A 0000#    disp:	ld	hl,(pointer)
  238 0548' 22 0000#    	ld	(table),hl	; Beginn Zeigertabelle hier
  239 054B' 2A 0000#    	ld	hl,(count)
  240 054E' 7C          	ld	a,h
  241 054F' B5          	or	l
  242 0550' CA 0000#    	jp	z,disp3		; keine Eintraege vorhanden!
  243 0553' CD 0000#    	call	sort		; Verzeichnis sortieren
  244                   
  245 0556' 3A 0016'    	ld	a,(option)
  246 0559' CB 6F       	bit	5,a		; ausfuehrliche Anzeige?
  247 055B' 28 ??       	jr	z,disp0		; nein
  248 055D' CD 0000#    	call	eprint
  249 0560' 0D 0A       	db	cr,lf
  250         0000      IF BS EQ 80
  252                   ELSE
  253 0562' 20 2D 2D 4E 	db	' --Name--.Typ  --Groesse--   ----geaendert---',0
  254                   ENDIF
  255 0590' 2A 0000#    disp0:	ld	hl,(table)	; Zeigertabelle
  256 0593' ED 5B 0000# 	ld	de,(count)	; Anzahl Eintraege
  257 0597' AF          	xor	a
  258 0598' 32 0000#    	ld	(page),a	; Zeilenzaehler =0
  259 059B' 0E 01       	ld	c,1		; Spaltenzaehler
  260 059D' 7A          disp1:	ld	a,d
  261 059E' B3          	or	e
  262 059F' 28 ??       	jr	z,disp3		; alle Dateien sind angezeigt!
  263 05A1' 0D          	dec	c
  264 05A2' 20 ??       	jr	nz,disp6	; noch eine Spalte anzeigen
  265 05A4' CD 0000#    	call	eprint
  266 05A7' 0D 0A 00    	db	cr,lf,0		; neue Zeile
  267 05AA' 3A 0000#    	ld	a,(page)
  268 05AD' 3C          	inc	a
  269 05AE' FE 14       	cp	20		; 20. Zeile erreicht?
  270 05B0' 38 ??       	jr	c,disp4		; nein, weiter anzeigen
  271 05B2' CD 0000#    ask:	call	capin		; Eingabe abwarten
  272 05B5' FE 03       	cp	3
  273 05B7' CA 0000#    	jp	z,exit		; BRK -> Abbruch
  274 05BA' FE 1B       	cp	ESC
  275 05BC' CA 0000#    	jp	z,exit		; ESC -> Abbruch
  276 05BF' FE 20       	cp	' '
  277 05C1' 28 ??       	jr	z,disp5		; SPC -> eine weitere Zeile
  278 05C3' FE 0D       	cp	cr
  279 05C5' 20 EB       	jr	nz,ask
  280 05C7' AF          	xor	a		; CR = neue Seite
  281 05C8' 32 0000#    disp4:	ld	(page),a
  282 05CB'             disp5:
  283         0000      IF BS EQ 80
  285                   ELSE
  286 05CB' 0E 04       	ld	c,4		; Anzahl Spalten fuer neue Zeile (64 Zeichen)
  287                   ENDIF
  288 05CD' 3E 20       disp6:	ld	a,' '
  289 05CF' CD 01CA'    	call	crtx
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  17
UDIR    Z80

  290 05D2' E5          	push	hl
  291 05D3' 7E          	ld	a,(hl)
  292 05D4' 23          	inc	hl
  293 05D5' 66          	ld	h,(hl)
  294 05D6' 6F          	ld	l,a		; Zeiger lesen
  295 05D7' 06 0C       	ld	b,12
  296 05D9' 7E          disp2:	ld	a,(hl)
  297 05DA' 23          	inc	hl
  298 05DB' CD 01CA'    	call	crtx		; Dateiname anzeigen
  299 05DE' 10 F9       	djnz	disp2
  300 05E0' 3A 0016'    	ld	a,(option)
  301 05E3' CB 6F       	bit	5,a
  302 05E5' D5          	push	de
  303 05E6' C4 0000#    	call	nz,wide		; Anzeige der zusaetzlichen Info's
  304 05E9' D1          	pop	de
  305 05EA' E1          	pop	hl
  306 05EB' 23          	inc	hl
  307 05EC' 23          	inc	hl		; naechster Zeiger
  308 05ED' 3E 20       	ld	a,' '
  309 05EF' CD 01CA'    	call	crtx
  310 05F2' CD 01CA'    	call	crtx
  311 05F5' 1B          	dec	de
  312 05F6' 18 A5       	jr	disp1
  313                   
  314                   ; Zusammenfassung:
  315                   
  316 05F8' CD 0000#    disp3:	call	eprint
  317 05FB' 0D 0A 20 00 	db	cr,lf,' ',0
  318 05FF' 2A 0000#    	ld	hl,(count)
  319 0602' CD 0000#    	call	phlfdc		; Anzahl
  320 0605' CD 0000#    	call	eprint
  321 0608' 20 44 61 74 	db	' Dateien/Verzeichnisse insgesamt.',cr,lf,0
  322                   
  323 062C' 3E 11       exit:	LD	A,ECS		; Extend. CMD-Modus
  324 062E' CD 0155'    	CALL	PUT
  325 0631' 3E 0D       	LD	A,CR
  326 0633' CD 0155'    	CALL	PUT
  327 0636' CD 0236'    	call	deinit		; Treiber deaktivieren
  328 0639' C7          	rst	0
  329                   
  330                   ; Fehlerbehandlung:
  331                   
  332                   ;
  333 063A' CD 0000#    err7:	call	eprint
  334 063D' 55 6E 65 72 	db	'Unerwartete Vinculum-Antwort',cr,lf,0
  335 065C' 18 CE       	jr	exit
  336                   
  337 065E' CD 0000#    err8:	call	eprint
  338 0661' 54 50 41 2D 	db	'TPA-Speicherueberlauf',cr,lf,0
  339 0679' C3 062C'    	jp	exit
  340                   
  341                   ; eingelesenes Verzeichnis alphabetisch sortieren
  342                   ; (Verzeichnisse dabei zuerst anordnen)
  343                   
  344                   ; 1. Zeigertabelle erzeugen:
  345                   
  346 067C' 2A 0000#    sort:	ld	hl,(table)	; Beginn der Zeigertabelle
  347 067F' ED 5B 0000# 	ld	de,(count)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  18
UDIR    Z80

  348 0683' 19          	add	hl,de
  349 0684' 19          	add	hl,de		; + 2 Byte je Eintrag
  350 0685' EB          	ex	de,hl
  351 0686' 2A 0000#    	ld	hl,(tpaend)	; TPA-Ende
  352 0689' ED 52       	sbc	hl,de
  353 068B' DA 065E'    	jp	c,err8		; das reicht nicht!
  354                   
  355 068E' 2A 0000#    	ld	hl,(count)	; Anzahl Elemente
  356 0691' E5          	push	hl
  357 0692' 11 0000#    	ld	de,$memry	; Tabelle der Namen
  358 0695' 2A 0000#    	ld	hl,(table)	; Zeigertabelle
  359 0698' 01 000C     	ld	bc,12		; Laenge eines Eintrages
  360 069B' 73          BLORD:	ld	(hl),e
  361 069C' 23          	inc	hl
  362 069D' 72          	ld	(hl),d
  363 069E' 23          	inc	hl
  364 069F' EB          	ex	de,hl
  365 06A0' 09          	add	hl,bc		; naechstes Element
  366 06A1' EB          	ex	de,hl
  367 06A2' E3          	ex	(sp),hl
  368 06A3' 2B          	dec	hl		; noch ein Element?
  369 06A4' 7C          	ld	a,h
  370 06A5' B5          	or	l
  371 06A6' E3          	ex	(sp),hl
  372 06A7' 20 F2       	jr	nz,BLORD
  373 06A9' E1          	pop	hl
  374                   
  375 06AA' 21 0016'    	ld	hl,option
  376 06AD' CB 4E       	bit	1,(hl)
  377 06AF' C8          	ret	z		; unsortiert anzeigen
  378 06B0' CD 0000#    	call	eprint
  379 06B3' 2C 20 73 6F 	db	', sortieren',0
  380                   
  381                   ;
  382                   ; 2. Sortieren ueber Zeiger-Methode
  383                   ; (Shell-SORT von "Software Tools", Kernigan/Plaugher, (c) 1976)
  384                   ;
  385 06BF' 2A 0000#    	ld	hl,(count)	; Anzahl Elemente
  386 06C2' 22 0000#    	ld	(GAP),hl	; GAP fuer ersten Vergleich initialisieren
  387 06C5' 2A 0000#    SORT0:	ld	hl,(GAP)
  388 06C8' CB 3C       	srl	h
  389 06CA' CB 1D       	rr	l		; GAP:=GAP/2
  390 06CC' 7D          	ld	a,l
  391 06CD' B4          	or	h
  392 06CE' C8          	ret	z		; fertig, wenn GAP/2=0
  393 06CF' CB 45       	bit	0,l		; GAP ungeradzahlig?
  394 06D1' 20 ??       	jr	nz,SORT1
  395 06D3' 2B          	dec	hl		; GAP ungerade machen
  396 06D4' 22 0000#    SORT1:	ld	(GAP),hl
  397 06D7' 22 0000#    SORT2:	ld	(J),hl		; J:=GAP
  398                   ;
  399                   ; For (J=GAP+1; J<=N; J=J+1)
  400                   ;
  401 06DA' 2A 0000#    RIGHT:	ld	hl,(J)
  402 06DD' 23          	inc	hl		; J:=J+1
  403 06DE' 22 0000#    	ld	(J),hl
  404 06E1' EB          	ex	de,hl		; DE=(J)
  405 06E2' 2A 0000#    	ld	hl,(count)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  19
UDIR    Z80

  406 06E5' B7          	or	a
  407 06E6' ED 52       	sbc	hl,de		; Anzahl-J
  408 06E8' 38 DB       	jr	c,SORT0		; neu starten, wenn I > N
  409                   ;
  410                   ; For (I=J-GAP; J>0; I=J-GAP)
  411                   ;
  412 06EA' 2A 0000#    LEFT:	ld	hl,(GAP)
  413 06ED' EB          	ex	de,hl
  414 06EE' ED 52       	sbc	hl,de		; I:=J-GAP
  415 06F0' 38 E8       	jr	c,RIGHT		; wenn J < 0
  416 06F2' 28 E6       	jr	z,RIGHT		; wenn J = 0
  417                   ;
  418                   ; Set JG=I+GAP
  419                   ;
  420 06F4' EB          	ex	de,hl
  421 06F5' 19          	add	hl,de		; JG:=I+GAP
  422                   ;
  423                   ; If (I) <= (JG) then Break else Exchange
  424                   ;
  425 06F6' E5          	push	hl
  426 06F7' D5          	push	de
  427 06F8' CD 0000#    	call	COMPAR		; Vergleich
  428 06FB' D1          	pop	de
  429 06FC' E1          	pop	hl
  430 06FD' 28 DB       	jr	z,RIGHT		; Dateiname gleich (sollte nicht vorkommen!)
  431 06FF' 30 D9       	jr	nc,RIGHT	; richtig sortiert
  432 0701' D5          	push	de
  433 0702' CD 0000#    	call	SWAP		; Austausch
  434 0705' D1          	pop	de
  435 0706' 18 E2       	jr	LEFT		; zurueck furr weitere Tests
  436                   ;
  437                   ; Zeiger zweier Elemente austauschen
  438                   ; PE:	HL,DE	Nummer der Elemente
  439                   ; VR:	AF,BC,DE,HL
  440                   ;
  441 0708' ED 4B 0000# SWAP:	ld	bc,(table)	; Adresstabelle
  442 070C' 0B          	dec	bc
  443 070D' 0B          	dec	bc
  444 070E' 29          	add	hl,hl		; *2
  445 070F' 09          	add	hl,bc		; 1. Element
  446 0710' EB          	ex	de,hl
  447 0711' 29          	add	hl,hl		; *2
  448 0712' 09          	add	hl,bc		; 2. Element
  449 0713' CD 0000#    	call	SWAP1		; erst aufrufen, dann reinlaufen
  450 0716' 4E          SWAP1:	ld	c,(hl)
  451 0717' 1A          	ld	a,(de)
  452 0718' EB          	ex	de,hl
  453 0719' 71          	ld	(hl),c
  454 071A' 12          	ld	(de),a
  455 071B' 23          	inc	hl
  456 071C' 13          	inc	de
  457 071D' C9          	RET
  458                   ;
  459                   ; Zwei Eintraege ueber deren Zeiger vergleichen
  460                   ; PE:	HL,DE	Nummer der Elemente
  461                   ; PA:	CY=1	(HL) > (DE)
  462                   ;	Z=1	Namen gleich, dann
  463                   ;		CY'=1	(HL) > (DE) bei Vergleich der EXT-Nummer
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  20
UDIR    Z80

  464                   ; VR:	AF,BC,DE,HL
  465                   ;
  466 071E' ED 4B 0000# COMPAR:	ld	bc,(table)	; Adresstabelle
  467 0722' 0B          	dec	bc
  468 0723' 0B          	dec	bc
  469 0724' 29          	add	hl,hl		; *2
  470 0725' 09          	add	hl,bc		; 1. Element
  471 0726' EB          	ex	de,hl
  472 0727' 29          	add	hl,hl		; *2
  473 0728' 09          	add	hl,bc		; 2. Element
  474 0729' EB          	ex	de,hl
  475 072A' 4E          	ld	c,(hl)
  476 072B' 23          	inc	hl
  477 072C' 46          	ld	b,(hl)		; BC ist Adresse des ersten Elements
  478 072D' EB          	ex	de,hl
  479 072E' 59          	ld	e,c
  480 072F' 50          	ld	d,b		; DE ist Adresse des ersten Elements
  481 0730' 4E          	ld	c,(hl)
  482 0731' 23          	inc	hl
  483 0732' 66          	ld	h,(hl)
  484 0733' 69          	ld	l,c		; HL ist Adresse des zweiten Elements
  485 0734' E5          	push	hl
  486 0735' D5          	push	de
  487 0736' 01 0008     	ld	bc,8		; Trennzeichen nach Dateiname
  488 0739' 09          	add	hl,bc
  489 073A' EB          	ex	de,hl
  490 073B' 09          	add	hl,bc
  491 073C' EB          	ex	de,hl
  492 073D' 1A          	ld	a,(de)
  493 073E' BE          	cp	(hl)		; DIR oder Datei?
  494 073F' D1          	pop	de
  495 0740' E1          	pop	hl
  496 0741' C0          	ret	nz		; unterschiedlich
  497 0742' 06 08       	ld	b,8		; Vergleich Dateiname
  498 0744' CD 0000#    	call	CMPLE
  499 0747' C0          	ret	nz		; unterschiedlich
  500 0748' 13          	inc	de
  501 0749' 23          	inc	hl		; Trennzeichen uebergehen
  502 074A' 06 03       	ld	b,3
  503 074C' 1A          CMPLE:	ld	a,(de)
  504 074D' BE          	cp	(hl)		; Vergleich
  505 074E' 13          	inc	de
  506 074F' 23          	inc	hl
  507 0750' C0          	ret	nz		; Ende, sobald ungleich
  508 0751' 10 F9       	djnz	CMPLE
  509 0753' C9          	ret
  510                   
  511                   ; Anzeige der weiteren Informationen fuer ausfuehrliche Anzeige:
  512                   ;
  513                   ; PE:	HL	Zeiger zu Name nach Eintrag
  514                   ; PA:	C=1	neue Zeile beginnen
  515                   
  516 0754' 2B          wide:	dec	hl
  517 0755' 11 0067     	ld	de,fcb1+11	; in FCB1
  518 0758' 01 0003     	ld	bc,3
  519 075B' ED B8       	lddr			; Dateityp kopieren
  520 075D' 7E          	ld	a,(hl)
  521 075E' FE 2E       	cp	'.'		; Datei oder Verzeichnis?
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  21
UDIR    Z80

  522 0760' C2 0000#    	jp	nz,widex	; bei Verzeichnis keine weitere Angabe...
  523 0763' 2B          	dec	hl
  524 0764' 01 0008     	ld	bc,8
  525 0767' ED B8       	lddr			; Dateiname kopieren
  526                   
  527                   ; Dateigroesse abfragen:
  528                   
  529 0769' 3E 01       test0:	ld	a,dir		; DIR <dateiname>
  530 076B' CD 0168'    	call	outnam		; um Dateigroesse zu ermitteln
  531 076E' 3E 0D       	ld	a,cr
  532 0770' CD 0155'    	call	put		; Kommando ausfuehren
  533                   
  534 0773' CD 0124'    	call	get		; 1. Zeichen abholen
  535 0776' DA 062C'    	jp	c,exit		; Break oder TimeOut
  536 0779' FE 0D       	cp	cr
  537 077B' DA 063A'    	jp	c,err7		; nicht CR
  538 077E' CD 0124'    test1:	call	get		; naechste Zeichen (Dateiname) abholen
  539 0781' DA 062C'    	jp	c,exit		; Break oder TimeOut
  540 0784' FE 0D       	cp	cr		; CR vor Leerzeichen?
  541 0786' CA 0000#    	jp	z,err6		; dann Datei nicht vorhanden (CF-Error)
  542 0789' FE 20       	cp	' '		; Trennzeichen?
  543 078B' 20 F1       	jr	nz,test1
  544 078D' 21 0000#    	ld	hl,filesize	; Dateigroesse abholen
  545 0790' 06 04       	ld	b,4		; 4 Byte
  546 0792' CD 0124'    test2:	call	get
  547 0795' DA 062C'    	jp	c,exit		; Break oder TimeOut
  548 0798' 77          	ld	(hl),a
  549 0799' 23          	inc	hl
  550 079A' 10 F6       	djnz	test2
  551 079C' CD 0124'    test3:	call	get
  552 079F' DA 062C'    	jp	c,exit
  553 07A2' FE 0D       	cp	cr		; Zeilenende erkannt?
  554 07A4' 20 F6       	jr	nz,test3
  555 07A6' CD 0124'    	call	get
  556 07A9' DA 062C'    	jp	c,exit
  557 07AC' FE 3E       	cp	'>'		; Prompt?
  558 07AE' C2 063A'    	jp	nz,err7
  559 07B1' CD 0124'    	call	get
  560 07B4' DA 062C'    	jp	c,exit
  561 07B7' FE 0D       	cp	cr
  562 07B9' C2 063A'    	jp	nz,err7
  563                   
  564                   ; Dateigroesse in KByte umrechnen und anzeigen:
  565                   
  566 07BC' ED 5B ????  	ld	de,(filesize+2)	; High-Teil
  567 07C0' 2A 0000#    	ld	hl,(filesize)	; Low-Teil
  568 07C3' 01 03FF     	ld	bc,1023		; aufrunden auf volle KByte
  569 07C6' 09          	add	hl,bc
  570 07C7' EB          	ex	de,hl
  571 07C8' 01 0000     	ld	bc,0
  572 07CB' ED 4A       	adc	hl,bc		; 32 Bit jetzt in HLDE
  573 07CD' 06 0A       	ld	b,10
  574 07CF' CB 3C       calc1:	srl	h
  575 07D1' CB 1D       	rr	l
  576 07D3' CB 1A       	rr	d
  577 07D5' CB 1B       	rr	e
  578 07D7' 10 F6       	djnz	calc1		; /1024
  579 07D9' 7C          	ld	a,h
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  22
UDIR    Z80

  580 07DA' B5          	or	l
  581 07DB' 28 ??       	jr	z,calc2
  582 07DD' CD 0000#    	call	eprint
  583 07E0' 20 20 20 3E 	db	'   > 64 MByte',0	; Datei ist 64MByte oder groesser!
  584 07EE' 18 ??       	jr	calc3
  585                   	;
  586 07F0' EB          calc2:	ex	de,hl
  587 07F1' CD 0000#    	call	eprint
  588 07F4' 20 20 00    	db	'  ',0
  589 07F7' CD 0000#    	call	phldc		; Anzeige Dateigroesse
  590 07FA' CD 0000#    	call	eprint
  591 07FD' 20 4B 42 79 	db	' KByte',0
  592 0804'             calc3:
  593                   
  594                   ; Dateidatum ermitteln:
  595                   
  596 0804' 3E 2F       	ld	a,dirt		; DIR <dateiname>
  597 0806' CD 0168'    	call	outnam		; um Dateidatum zu ermitteln
  598 0809' 3E 0D       	ld	a,cr
  599 080B' CD 0155'    	call	put		; Kommando ausfuehren
  600                   
  601 080E' CD 0124'    	call	get		; 1. Zeichen abholen
  602 0811' DA 062C'    	jp	c,exit		; Break oder TimeOut
  603 0814' FE 0D       	cp	cr
  604 0816' C2 063A'    	jp	nz,err7		; nicht CR
  605 0819' CD 0124'    test4:	call	get		; naechste Zeichen (Dateiname) abholen
  606 081C' DA 062C'    	jp	c,exit		; Break oder TimeOut
  607 081F' FE 0D       	cp	cr		; CR vor Leerzeichen?
  608 0821' CA 0000#    	jp	z,err6		; dann Datei nicht vorhanden (CF-Error)
  609 0824' FE 20       	cp	' '		; Trennzeichen?
  610 0826' 20 F1       	jr	nz,test4
  611 0828' 21 0000#    	ld	hl,data		; Dateidatum abholen
  612 082B' 06 0A       	ld	b,10		; 10 Byte
  613 082D' CD 0124'    test5:	call	get
  614 0830' DA 062C'    	jp	c,exit		; Break oder TimeOut
  615 0833' 77          	ld	(hl),a
  616 0834' 23          	inc	hl
  617 0835' 10 F6       	djnz	test5
  618 0837' CD 0124'    test6:	call	get
  619 083A' DA 062C'    	jp	c,exit
  620 083D' FE 0D       	cp	cr		; Zeilenende erkannt?
  621 083F' 20 F6       	jr	nz,test6
  622 0841' CD 0124'    	call	get
  623 0844' DA 062C'    	jp	c,exit
  624 0847' FE 3E       	cp	'>'		; Prompt?
  625 0849' C2 063A'    	jp	nz,err7
  626 084C' CD 0124'    	call	get
  627 084F' DA 062C'    	jp	c,exit
  628 0852' FE 0D       	cp	cr
  629 0854' C2 063A'    	jp	nz,err7
  630                   
  631                   ; Dateidatum konvertieren und anzeigen:
  632                   ; im 80-Zeichen-Modus alle drei Werte
  633                   ; im 64-Zeichen-Modus nur das Aenderungsdatum
  634                   
  635         0000      IF BS EQ 80
  641                   ENDIF
  642 0857' 21 ????     	ld	hl,data+6	; dritter Wert
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  23
UDIR    Z80

  643 085A' 11 0000#    	ld	de,Datum
  644 085D' CD 0000#    	call	m2utim		; Aenderungs-Datum konvertieren
  645 0860' CD 0000#    	call	danz
  646 0863' CD 0000#    	call	tanz
  647         0000      IF BS EQ 80
  652                   ENDIF
  653 0866' 0E 01       widex:	ld	c,1		; naechsten Eintrag auf neue Zeile!
  654 0868' C9          	ret
  655                   
  656 0869' CD 0000#    err6:	call	eprint
  657 086C' 20 2D 3E 20 	db	' -> Datei nicht vorhanden !?',0
  658 0889' 18 DB       	jr	widex
  659                   
  660                   ; Dateidatum anzeigen:
  661                   
  662 088B' CD 0000#    danz:	call	eprint
  663 088E' 20 20 20 00 	db	'   ',0
  664 0892' 3A 0000#    	ld	a,(Tag)
  665 0895' CD 0000#    	call	pa2hc
  666 0898' 3E 2E       	ld	a,'.'
  667 089A' CD 0000#    	call	cout
  668 089D' 3A 0000#    	ld	a,(Monat)
  669 08A0' CD 0000#    	call	pa2hc
  670 08A3' 3E 2E       	ld	a,'.'
  671 08A5' CD 0000#    	call	cout
  672 08A8' 3A 0000#    	ld	a,(Jahr)
  673 08AB' FE 78       	cp	78h
  674 08AD' 3E 19       	ld	a,19h		; Jahrhundert 1978-1999
  675 08AF' CE 00       	adc	a,0
  676 08B1' 27          	daa			; oder 2000-2077
  677 08B2' CD 0000#    	call	pa2hc
  678 08B5' 3A 0000#    	ld	a,(Jahr)
  679 08B8' CD 0000#    	call	pa2hc
  680 08BB' C9          	ret
  681                   
  682                   ; Uhrzeit anzeigen:
  683                   
  684 08BC' 3E 20       tanz:	ld	a,' '
  685 08BE' CD 0000#    	call	cout
  686 08C1' 3A 0000#    	ld	a,(Stunde)
  687 08C4' CD 0000#    	call	pa2hc
  688 08C7' 3E 3A       	ld	a,':'
  689 08C9' CD 0000#    	call	cout
  690 08CC' 3A 0000#    	ld	a,(Minute)
  691 08CF' CD 0000#    	call	pa2hc
  692 08D2' C9          	ret
  693                   
  694                   ; Datenbereich:
  695                   
  696                   	DSEG
  697         001E      size	equ	30		; Puffergroesse
  698 0000" 0000  0000  filesize:	dw	0,0	; Dateigroesse in Byte
  699                   ;kbyte:		dw	0	; Dateigroesse in KByte
  700 0004" 00          page:		db	0		; Zeilenzaehler fuer Page-Modus
  701 0005" 00 00 00 00 data:		ds	size,0		; Datenpuffer fuer DIR und DIRT
  702                   
  703 0023" 00 00 00 00 Datum:		DS	5,0	; Datum im CP/M-Format (BCD)
  704         0023"     JAHR	equ	Datum
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  24
UDIR    Z80

  705         0024"     MONAT	equ	Datum+1
  706         0025"     TAG	equ	Datum+2
  707         0026"     STUNDE	equ	Datum+3
  708         0027"     MINUTE	equ	Datum+4
  709 0028" 0000        pointer:	dw	0		; Zeiger Verzeichnispuffer
  710 002A" 0000        count:		dw	0		; Anzahl Dateien
  711 002C" 0000        table:		dw	0		; Zeiger auf Beginn der Zeigertabelle (Sort)
  712 002E" 0000        GAP:		dw	0		; Variable fuer SORT
  713 0030" 0000        J:		dw	0		;	"	"
  714                   
  715 0032" 0000        tpaend:		dw	0	; nutzbare TPA-Endadresse
  716                   
  717                   	END
 0 Error(s) Detected. 2259 Program Bytes. 52 Data Bytes.
 183 Symbols Detected.
Page-Modus
  70